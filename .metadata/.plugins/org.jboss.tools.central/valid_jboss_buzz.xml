<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" media="screen" href="/~d/styles/atom10full.xsl"?><?xml-stylesheet type="text/css" media="screen" href="http://feeds.feedburner.com/~d/styles/itemcontent.css"?><feed xmlns="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:feedburner="http://rssnamespace.org/feedburner/ext/1.0"><title>JBoss Tools Aggregated Feed</title><link rel="alternate" href="http://tools.jboss.org" /><subtitle>JBoss Tools Aggregated Feed</subtitle><dc:creator>JBoss Tools</dc:creator><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="self" type="application/atom+xml" href="http://feeds.feedburner.com/jbossbuzz" /><feedburner:info uri="jbossbuzz" /><atom10:link xmlns:atom10="http://www.w3.org/2005/Atom" rel="hub" href="http://pubsubhubbub.appspot.com/" /><entry><title>Add Java language support for Apache Camel K inside Eclipse Che</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/koG7EL_2ekU/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Camel K" scheme="searchisko:content:tags" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><author><name>Aur√©lien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-add_java_language_support_for_apache_camel_k_inside_eclipse_che</id><updated>2020-09-02T07:00:40Z</updated><published>2020-09-02T07:00:40Z</published><content type="html">&lt;p&gt;&lt;a href="https://camel.apache.org/projects/camel-k/" target="_blank" rel="nofollow noopener noreferrer"&gt;Apache Camel K&lt;/a&gt; should be as lightweight as possible. Therefore, the Camel K project provides standalone Java files that describe a Camel integration. The downside to this practice is that existing IDEs cannot provide complete support out of the box. A few months ago, I mentioned the &lt;a href="https://developers.redhat.com/blog/2020/02/03/camel-k-standalone-java-file-now-with-java-language-support"&gt;Java language support for Apache Camel K&lt;/a&gt; that was discussed in &lt;em&gt;&lt;a href="https://developers.redhat.com/blog/2019/09/30/sending-a-telegram-with-apache-camel-k-and-visual-studio-code"&gt;Red Hat Visual Studio Code (VS Code) extension&lt;/a&gt;,&lt;/em&gt; and how it provides &lt;a href="https://developers.redhat.com/blog/2020/02/03/camel-k-standalone-java-file-now-with-java-language-support"&gt;Java language support for Apache Camel K&lt;/a&gt;. In this article and demo, I show you how to do the same with &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://che.openshift.io"&gt;che.openshift.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-739157"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Demo: Using the Java language plug-in&lt;/h2&gt; &lt;p&gt;I&amp;#8217;ve &lt;a target="_blank" rel="nofollow" href="https://github.com/apupier/camelk-on-che-with-java-support-example"&gt;written an example application&lt;/a&gt; to demonstrate how to use this plug-in to add &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; language support to Apache Camel K within Eclipse Che. If you have an account on &lt;a target="_blank" rel="nofollow" href="https://che.openshift.io/dashboard/"&gt;che.openshift.io&lt;/a&gt;, that interface offers a button you can click to open the example in a ready-to-use Che workspace. The included video shows how easy it is to start a workspace with a pre-configured devfile.&lt;/p&gt; &lt;p&gt;Fortunately, the Java language support extension is compatible with other &lt;a href="https://developers.redhat.com/blog/2020/01/24/apache-camel-k-development-inside-eclipse-che-iteration-1/"&gt;Camel K on Che&lt;/a&gt; features. (Click the link for a detailed introduction to Apache Camel K development inside of Eclipse Che.)&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/s54uEFYmSGw?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Configuring Java support for your Apache Camel K projects&lt;/h2&gt; &lt;p&gt;The key point is to reference the specific plug-in configuration that you need. In your devfile, you need to add a reference to the &lt;code&gt;chePlugin&lt;/code&gt; for Camel K:&lt;/p&gt; &lt;pre&gt;- type: chePlugin reference: &amp;#62;- https://raw.githubusercontent.com/apupier/camelk-on-che-with-java-support-example/master/.che/camelk-plugin-meta.yaml alias: vscode-camelk &lt;/pre&gt; &lt;p&gt;Apart from that, the Che devfile configuration is typical. See the &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/docs/che-7/using-a-visual-studio-code-extension-in-che/"&gt;Eclipse Che documentation&lt;/a&gt; for a discussion of various ways to take advantage of the Che devfile configuration possibilities.&lt;/p&gt; &lt;h2&gt;Technical insights&lt;/h2&gt; &lt;p&gt;The provided plug-in configuration groups together the VS Code extensions for &lt;a href="https://developers.redhat.com/topics/kubernetes/"&gt;Kubernetes&lt;/a&gt;, Camel K, and Java. We used a custom dockerfile as a sidecar to gather requirements for all of the extensions used in the Che plug-in definition.&lt;/p&gt; &lt;p&gt;These extensions are grouped because all of them rely on passing files through the filesystem (VS Code Global Storage), sharing &lt;code&gt;kubeconfig&lt;/code&gt;, and reusing command-line tooling (&lt;code&gt;kubectl, mvn&lt;/code&gt;). In the future, we expect that we won&amp;#8217;t need a specific plug-in definition; we also expect to have a predefined stack configured.&lt;/p&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;We are working on including Java language support directly in the Apache Camel K stack. To help promote this initiative, please follow, vote, and help us with &lt;a target="_blank" rel="nofollow" href="https://github.com/eclipse/che/issues/16018"&gt;this issue&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#38;linkname=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F02%2Fadd-java-language-support-for-apache-camel-k-inside-eclipse-che%2F&amp;#038;title=Add%20Java%20language%20support%20for%20Apache%20Camel%20K%20inside%20Eclipse%20Che" data-a2a-url="https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/" data-a2a-title="Add Java language support for Apache Camel K inside Eclipse Che"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/"&gt;Add Java language support for Apache Camel K inside Eclipse Che&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/koG7EL_2ekU" height="1" width="1" alt=""/&gt;</content><summary>Apache Camel K should be as lightweight as possible. Therefore, the Camel K project provides standalone Java files that describe a Camel integration. The downside to this practice is that existing IDEs cannot provide complete support out of the box. A few months ago, I mentioned the Java language support for Apache Camel K that was discussed in Red Hat Visual Studio Code (VS Code) extension, and h...</summary><dc:creator>Aur√©lien Pupier</dc:creator><dc:date>2020-09-02T07:00:40Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/02/add-java-language-support-for-apache-camel-k-inside-eclipse-che/</feedburner:origLink></entry><entry><title>Using Spring Cloud Functions with OpenShift Serverless</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/APx7--iqTxU/" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="google translate wrapper" scheme="searchisko:content:tags" /><category term="gradle" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="java container" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><category term="Spring Boot" scheme="searchisko:content:tags" /><category term="Spring Cloud" scheme="searchisko:content:tags" /><author><name>markito</name></author><id>searchisko:content:id:jbossorg_blog-using_spring_cloud_functions_with_openshift_serverless</id><updated>2020-09-01T07:00:35Z</updated><published>2020-09-01T07:00:35Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://spring.io/projects/spring-cloud-function"&gt;Spring Cloud Functions&lt;/a&gt; are yet another interesting option for &lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java developers&lt;/a&gt; when building &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless applications&lt;/a&gt;. You have already seen how to &lt;a href="https://developers.redhat.com/blog/2020/01/02/kubernetes-native-spring-apps-on-quarkus/"&gt;build and run applications for Red Hat OpenShift Serverless&lt;/a&gt; using &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, but in this article, we talk about how to use Spring Cloud Functions and walk you through those steps. These steps are similar to running any other &lt;a href="https://developers.redhat.com/topics/spring-boot"&gt;Spring Boot&lt;/a&gt; application with &lt;a target="_blank" rel="nofollow" href="https://openshift.com/serverless"&gt;OpenShift Serverless.&lt;/a&gt; One of the benefits of building an open hybrid serverless platform is giving developers a choice of &lt;a href="https://developers.redhat.com/blog/category/languages-compilers/"&gt;programming languages&lt;/a&gt;, &lt;a href="https://developers.redhat.com/topics/developer-tools"&gt;tools&lt;/a&gt;, frameworks, and portability across any environment to run serverless applications. Beyond that, you want to ensure that the developer experience and overall workflow is intuitive and practical, which is what you will learn here.&lt;/p&gt; &lt;p&gt;If you are interested in just watching the steps performed in this article you can watch the recording on YouTube.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/yXlTs0On3Ys?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Requirements&lt;/h2&gt; &lt;ul&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.gradle.org/current/userguide/installation.html"&gt;Gradle&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Java Development Tool Kit (JDK 8+)&lt;/li&gt; &lt;li&gt;OpenShift 4.3+&lt;/li&gt; &lt;li&gt;&lt;a href="https://openshift.com/serverless" rel="nofollow"&gt;OpenShift Serverless&lt;/a&gt;¬†1.7+&lt;/li&gt; &lt;li&gt;&lt;code&gt;curl&lt;/code&gt;&lt;/li&gt; &lt;li&gt;&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/serverless/installing_serverless/installing-kn.html"&gt;&lt;code&gt;kn&lt;/code&gt;&lt;/a&gt;¬†(Knative Client)&lt;/li&gt; &lt;/ul&gt; &lt;h2&gt;Generate the Spring Cloud Functions project&lt;/h2&gt; &lt;p&gt;One of the easiest ways to generate a Spring project is using¬†&lt;code&gt;curl&lt;/code&gt;¬†to access¬†&lt;code&gt;start.spring.io&lt;/code&gt; and that&amp;#8217;s exactly how we will start our project:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/ab6184e4f18bca33f89df78721731411"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This will generate and download a project inside the¬†&lt;code&gt;my-function-project&lt;/code&gt;¬†folder.&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-implement-your-function" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#implement-your-function" aria-hidden="true"&gt;&lt;/a&gt;Implement your first function&lt;/h2&gt; &lt;p&gt;We will implement a quick and dirty Google Translator wrapper. In order to create functions using Spring Cloud Functions, you need a method with the &lt;code&gt;@Bean&lt;/code&gt;¬†annotation that can follow any of the functional interfaces from¬†&lt;code&gt;java.util.function&lt;/code&gt;¬†such as¬†&lt;code&gt;Consumer&lt;/code&gt;,¬†&lt;code&gt;Supplier&lt;/code&gt;, or &lt;code&gt;Function&lt;/code&gt;. For more details about how Spring Cloud Functions work please read the &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-cloud-function/docs/3.0.8.RELEASE/reference/html/spring-cloud-function.html"&gt;documentation&lt;/a&gt;, but for this example just copy and paste the following method to your &lt;em&gt;DemoApplication.java&lt;/em&gt; file:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/e976443fd61a6d7d2278f2acfa7c18d3"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;Test your function locally&lt;/h3&gt; &lt;p&gt;Since Spring Cloud Functions are just Spring Boot apps, you can implement unit tests just like any other Java application using JUnit, Mockito, or whatever you would like.¬† You can also run the application locally, using &lt;code&gt;gradle bootRun&lt;/code&gt;¬†or¬†&lt;code&gt;mvn spring-boot:run&lt;/code&gt;, which is useful for validating the application iteratively before running &lt;a href="https://developers.redhat.com/topics/containers"&gt;inside a container&lt;/a&gt;.¬† Make sure you have fixed all Java imports and then start the application locally using:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/cf771a9941e7b8e3e187aaaa1eee55e7"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Every function will be mapped to an endpoint that can be accessed as follows:&lt;/p&gt; &lt;pre&gt;http://localhost:8080/&amp;#60;functionName&amp;#62; &lt;/pre&gt; &lt;p&gt;Concretely, for our translate function, you can access the endpoint using the following:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/5340d90f3288507d7c522733e0dd6338"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Using¬†&lt;code&gt;curl&lt;/code&gt; we post a word or a phrase and it gets translated to Spanish. You can parse the output and format it properly, but to keep this short I&amp;#8217;ll leave that as an exercise for the reader.¬† May &lt;a target="_blank" rel="nofollow" href="https://github.com/FasterXML/jackson"&gt;Jackson&lt;/a&gt;¬†and¬†&lt;a href="https://www.json.org/json-en.html" rel="nofollow"&gt;JSON&lt;/a&gt;¬†be your friends.&lt;/p&gt; &lt;h2&gt;Building a container using Jib&lt;/h2&gt; &lt;p&gt;So far we have built a Spring application and executed it locally but it&amp;#8217;s time to containerize the application. There are many ways to execute this step but I&amp;#8217;ve decided to stick to well-known tools used by the Java community, so I&amp;#8217;ll use &lt;code&gt;&lt;a target="_blank" rel="nofollow" href="https://github.com/GoogleContainerTools/jib"&gt;Jib&lt;/a&gt;&lt;/code&gt;¬†and add it as a plugin to my Gradle project.&lt;/p&gt; &lt;p&gt;Edit the¬†&lt;code&gt;build.gradle&lt;/code&gt;¬†file and append this line¬†&lt;code&gt;id 'com.google.cloud.tools.jib' version "2.4.0"&lt;/code&gt; to your plugins section. It should look like this:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/f6ee63153a25351d7fcccbb37885598b"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;With Jib as part of your project, Gradle can build your container and push it to your container registry of choice. &lt;a target="_blank" rel="nofollow" href="http://quay.io"&gt;Quay&lt;/a&gt; or &lt;a target="_blank" rel="nofollow" href="https://hub.docker.com/"&gt;DockerHub&lt;/a&gt; are well-known choices.&lt;/p&gt; &lt;p&gt;After you have the jib plugin on your Gradle project, build a container for the project using the following command: &lt;code&gt;gradle build jib --image=&amp;#60;your_container_registry&amp;#62;/demo-app:v1&lt;/code&gt;&lt;/p&gt; &lt;p&gt;On my machine this is what it looks like:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/9bf7aca34c8c1aabdd17bce7f8abde50"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This generated a container for your project and automatically pushed it to the container registry.¬† If you are new to &lt;a href="https://developers.redhat.com/topics/linux"&gt;Linux&lt;/a&gt; containers and container registries please read &lt;a href="https://developers.redhat.com/blog/2018/02/22/container-terminology-practical-introduction/"&gt;this post&lt;/a&gt; to get a practical introduction to the topic.&lt;/p&gt; &lt;h2&gt;Deploy to OpenShift Serverless&lt;/h2&gt; &lt;p&gt;With the container built you can now deploy the application using the Knative CLI, &lt;code&gt;kn&lt;/code&gt;:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/7f40db940f0edd2bd8e3898d71543f0a"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;OpenShift Serverless will do the heavy lifting of creating a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt; deployment, a route, SSL configuration (using your cluster&amp;#8217;s configuration), and auto-scaling configuration based on the number of requests. For more details about OpenShift Serverless, please check out the¬†&lt;a href="https://docs.openshift.com/container-platform/4.4/serverless/serverless-getting-started.html" rel="nofollow"&gt;product documentation&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The above code will auto-scale the application down (to zero) after six seconds without a new request.&lt;/p&gt; &lt;p&gt;Try it again using the URL from the service running in OpenShift:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/b1673b96043b3670c24f9a23a3666925"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;Adding a new function that can handle a JSON document&lt;/h2&gt; &lt;p&gt;When creating REST APIs it is very common to send and receive JSON documents and you can very easily add a function that takes a JSON message instead of a String.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-the-data-model" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#the-data-model" aria-hidden="true"&gt;&lt;/a&gt;The data model&lt;/h3&gt; &lt;p&gt;Create a new¬†&lt;code&gt;UserReview.java&lt;/code&gt;¬†file with the following content:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/df869ca8245f59ffde0175b0f679c476"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;We will use this class to marshal and unmarshal the JSON objects being sent or received by our API. Create a¬†&lt;code&gt;review.json&lt;/code&gt; file with the content below. This will be the input of our new &lt;code&gt;translateReview&lt;/code&gt; function.&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/31a7e912be19d7babf9b1aa719632b94"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;div class="highlight highlight-source-json"&gt; &lt;h3&gt;The function code&lt;/h3&gt; &lt;p&gt;This will be very similar to the previous function we created, it&amp;#8217;s just another method with the¬†&lt;code&gt;@Bean&lt;/code&gt; annotation and using our POJO class as input and output.&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/6cf0c421f3936ffb741ca61948666a98"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-posting-a-json-file" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#posting-a-json-file" aria-hidden="true"&gt;&lt;/a&gt;Posting a JSON file&lt;/h3&gt; &lt;p&gt;We will continue using¬†&lt;code&gt;curl&lt;/code&gt;¬†as our client here and specify a path to the¬†&lt;code&gt;review.json&lt;/code&gt; file created in the previous step.¬† Start the application again using &lt;code&gt;gradle bootRun&lt;/code&gt;then post a json file to the API:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/f35a880180b46258b5050db381b20c6f"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;As you can see, the function now accepts a JSON document and translates the user comment to Spanish.¬† You can experiment with a &lt;a target="_blank" rel="nofollow" href="https://docs.spring.io/spring-cloud-function/docs/3.0.8.RELEASE/reference/html/spring-cloud-function.html#_function_composition"&gt;declarative function composition&lt;/a&gt; way to implement this if that&amp;#8217;s your cup of tea, but I&amp;#8217;m keeping this simple for now.&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-building-your-new-container" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#building-your-new-container" aria-hidden="true"&gt;&lt;/a&gt;Building your new container&lt;/h3&gt; &lt;p&gt;Same steps as before but using a &lt;code&gt;v2&lt;/code&gt; tag, build a new version of the container:&lt;/p&gt; &lt;pre&gt;$ gradle jib --image=&amp;#60;your_container_registry&amp;#62;/demo-app:v2&lt;/pre&gt; &lt;h3&gt;&lt;a id="user-content-updating-the-deployed-application-to-include-the-new-function" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#updating-the-deployed-application-to-include-the-new-function" aria-hidden="true"&gt;&lt;/a&gt;Updating the deployed application to include the new function&lt;/h3&gt; &lt;p&gt;Now we are going to use another interesting feature of OpenShift Serverless, we will deploy a new version of the application but with a different URL, that way current clients of this API won&amp;#8217;t even know about this new functionality until we decide to send traffic to it:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/5e71653d3bda5f13b36151526a392cdc"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;This can be achieved by using tags. In this example, I&amp;#8217;m tagging a particular revision &lt;code&gt;@latest&lt;/code&gt;¬†with a¬†&lt;code&gt;preview&lt;/code&gt;¬†value that will be appended to the service URL. Also note, that I&amp;#8217;m setting 100% of traffic to the previous revision¬†&lt;code&gt;translator-v1&lt;/code&gt;, which means no traffic will be sent to the new version being deployed. This is also called a &amp;#8220;dark launch,&amp;#8221; where a new version of my application is available in a production environment but not necessarily receiving any requests unless someone knows which URL to use.&lt;/p&gt; &lt;p&gt;After validation is complete you can decide to gradually send traffic using &lt;a target="_blank" rel="nofollow" href="https://opensource.com/article/17/5/colorful-deployments"&gt;canary or blue/green deployment&lt;/a&gt; models. There is a step-by-step lab about how to implement those models on &lt;a href="https://learn.openshift.com/developing-on-openshift/serverless/" rel="nofollow"&gt;https://learn.openshift.com/developing-on-openshift/serverless/&lt;/a&gt;&lt;/p&gt; &lt;h3&gt;&lt;a id="user-content-testing" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#testing" aria-hidden="true"&gt;&lt;/a&gt;Testing&lt;/h3&gt; &lt;p&gt;Now you can execute the same curl command as before but this time adding the¬†&lt;code&gt;preview&lt;/code&gt; prefix:&lt;/p&gt; &lt;p&gt;View the code on &lt;a target="_blank" rel="nofollow" href="https://gist.github.com/markito/efec228f47b7515d03d5475d8deb6851"&gt;Gist&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;&lt;a id="user-content-conclusion" class="anchor" target="_blank" rel="nofollow" href="https://gist.github.com/whitel/69e7f292b13d2e18ba2624383ddb0b2b#conclusion" aria-hidden="true"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt; &lt;p&gt;You can easily build and deploy a Spring Cloud Functions application using OpenShift Serverless. The workflow feels natural for a Java developer and you can even build the container using a Gradle (or Maven) plugin such as Jib.&lt;/p&gt; &lt;p&gt;&lt;img class="wp-image-773617 size-large aligncenter" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screen-Shot-2020-08-31-at-3.53.11-PM-1024x550.png" alt="" width="640" height="344" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screen-Shot-2020-08-31-at-3.53.11-PM-1024x550.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screen-Shot-2020-08-31-at-3.53.11-PM-300x161.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screen-Shot-2020-08-31-at-3.53.11-PM-768x413.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;Using OpenShift Serverless you can also deploy multiple versions of the application and perform a dark launch, blue/green, or canary deployment with no sweat.¬† The OpenShift developer console makes it even easier to visualize traffic route information and the overall topology of your application.&lt;/p&gt; &lt;p&gt;For more details, &lt;a target="_blank" rel="nofollow" href="https://openshift.com/serverless"&gt;check the OpenShift Serverless page&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#38;linkname=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F09%2F01%2Fusing-spring-cloud-functions-with-openshift-serverless%2F&amp;#038;title=Using%20Spring%20Cloud%20Functions%20with%20OpenShift%20Serverless" data-a2a-url="https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/" data-a2a-title="Using Spring Cloud Functions with OpenShift Serverless"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/"&gt;Using Spring Cloud Functions with OpenShift Serverless&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/APx7--iqTxU" height="1" width="1" alt=""/&gt;</content><summary>Spring Cloud Functions are yet another interesting option for Java developers when building serverless applications. You have already seen how to build and run applications for Red Hat OpenShift Serverless using Quarkus, but in this article, we talk about how to use Spring Cloud Functions and walk you through those steps. These steps are similar to running any other Spring Boot application with Op...</summary><dc:creator>markito</dc:creator><dc:date>2020-09-01T07:00:35Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/09/01/using-spring-cloud-functions-with-openshift-serverless/</feedburner:origLink></entry><entry><title>Non Blocking Saga</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/dAhRmEXXM10/" /><category term="embedded" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="non-blocking" scheme="searchisko:content:tags" /><category term="server" scheme="searchisko:content:tags" /><author><name>William Burns</name></author><id>searchisko:content:id:jbossorg_blog-non_blocking_saga</id><updated>2020-08-31T12:00:00Z</updated><published>2020-08-31T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As many you are probably aware recent trends have shown that making applications non blocking provides quite a few benefits allowing for greater scalability with less resources. Infinispan has been written and rewriting parts to take advantage of this as we can for both embedded and server use cases.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_before_infinispan_11"&gt;&lt;a class="anchor" href="#_before_infinispan_11" /&gt;Before Infinispan 11&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Infinispan Server has always utilized netty, however we may not have been the best about ensuring we didn‚Äôt block the event loop. The HotRod Client in 9.2.0 also utilizes netty to provide for non blocking operations. The internal embedded interceptors were rewritten in 9.0.0 to provide for non blocking support for internal cache operations, which include put/get. Cache store operations in 10.0.0 were offloaded to a blocking thread pool to provide non blocking support.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_infinispan_11_non_blocking_changes"&gt;&lt;a class="anchor" href="#_infinispan_11_non_blocking_changes" /&gt;Infinispan 11 Non Blocking Changes&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;With the newest release we have rewritten lots of the internals of Infinispan to take advantage of non blocking as much as possible. The amount of changes is quite large and a bit hard to describe them all in this blog post. The various JIRA can be seen from &lt;a href="https://issues.redhat.com/browse/ISPN-10309" class="bare"&gt;https://issues.redhat.com/browse/ISPN-10309&lt;/a&gt;, which isn‚Äôt even complete yet despite how many different changes we have done.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The persistence SPI was completely rewritten in 11 with non blocking in mind as well and this will be covered in a future post as it has much more detailing it. For now you can rest assure that all prior stores will still work, however they may have or can be optimized to take into account non blocking support.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_conversions"&gt;&lt;a class="anchor" href="#_conversions" /&gt;Conversions&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Pretty much every module in the Infinispan code base has been changed to support non blocking. If code relies upon an API that is blocking that is known to be blocking, we offload those calls to a blocking thread pool to ensure we never block the non blocking thread.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Unfortunately some modules have not yet been updated and those are ones related to query. Query is in the middle of a giant refactoring and doing so would have caused massive conflicts and thus has been delayed to Infinispan 12. The server works around this by ensuring write operations performed upon a cache with query are always done in a blocking thread to ensure safety.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect2"&gt; &lt;h3 id="_thread_pools"&gt;&lt;a class="anchor" href="#_thread_pools" /&gt;Thread Pools&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan utilizes various thread pools for handling of operations. This table details how many thread pools each version of Infinispan can have.&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all stretch"&gt; &lt;caption class="title"&gt;Table 1. Thread Pools&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3334%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Embedded&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Server&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;5&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;7&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;2&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;3&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;As you can see there is more than a 50 percent reduction of the number of thread pools in both embedded and server modes. This in turn has allowed for a reduction of the default number of threads as well as seen in the next table. Note that N is how many cores that are available to the JVM.&lt;/p&gt; &lt;/div&gt; &lt;table class="tableblock frame-all grid-all stretch"&gt; &lt;caption class="title"&gt;Table 2. Maximum Default Thread Count&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3333%;"&gt; &lt;col style="width: 33.3334%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Version&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Embedded&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Server&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 10&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;310 + N&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;470 + (2 * N)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;ISPN 11&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;150 + (2 * N)&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;150 + (4 * N)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;div class="paragraph"&gt; &lt;p&gt;After this consolidation we have non blocking and blocking thread pools. As you can see this allows us to reduce the maximum number of threads in embedded by about half and the server to a third of what it used to be before.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The server has an additional thread pool for the netty event loop and unfortunately we cannot consolidate this thread pool, but it is planned for Infinispan 12, which will get us to the same number of threads and thread pools for both embedded and server modes.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Note that this doesn‚Äôt talk about the JGroups thread pool as this is unchanged and is the same.&lt;/p&gt; &lt;/div&gt; &lt;/col&gt; &lt;div class="sect2"&gt; &lt;h3 id="_blockhound"&gt;&lt;a class="anchor" href="#_blockhound" /&gt;BlockHound&lt;/h3&gt; &lt;div class="paragraph"&gt; &lt;p&gt;If you are familiar with making code non blocking it can be a very difficult task as even the most mundane call can be hiding something blocking, even if it is very brief. We could write something to do detect such calls, but there is already an open source tool that does exactly what we needed. This tool is BlockHound, which can detect blocking calls at runtime. More information about it can be found at &lt;a href="https://github.com/reactor/BlockHound" class="bare"&gt;https://github.com/reactor/BlockHound&lt;/a&gt;.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan takes advantage of blockhound in that we configure it at the module level. This allows the end user to even add block hound with Infinispan in embedded mode and it should work to test out to ensure that interactions with Infinispan are not blocking when needed. Note that we do not yet support block hound for the client, despite many methods are not blocking today.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/colgroup&gt; &lt;/table&gt; &lt;div class="sect1"&gt; &lt;h2 id="_what_remains_for_infinispan_12"&gt;&lt;a class="anchor" href="#_what_remains_for_infinispan_12" /&gt;What remains for Infinispan 12&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Infinispan 12 should bring the entire non blocking saga to its hopfully final completion.&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;h1 id="_the_aforementioned_query_modules_need_to_be_revamped" class="sect0"&gt;&lt;a class="anchor" href="#_the_aforementioned_query_modules_need_to_be_revamped" /&gt;The aforementioned query modules need to be revamped&lt;/h1&gt; &lt;h1 id="_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking" class="sect0"&gt;&lt;a class="anchor" href="#_existing_supported_cache_stores_need_to_be_rewritten_to_directly_support_non_blocking" /&gt;Existing supported cache stores need to be rewritten to directly support non blocking&lt;/h1&gt; &lt;h1 id="_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread" class="sect0"&gt;&lt;a class="anchor" href="#_cache_retrieval_needs_to_be_offloaded_to_a_blocking_thread" /&gt;Cache retrieval needs to be offloaded to a blocking thread&lt;/h1&gt; &lt;h1 id="_combine_server_event_loop_with_non_blocking_thread_pool" class="sect0"&gt;&lt;a class="anchor" href="#_combine_server_event_loop_with_non_blocking_thread_pool" /&gt;Combine server event loop with non blocking thread pool&lt;/h1&gt; &lt;div class="openblock partintro"&gt; &lt;div class="content"&gt; Also if time permits the Infinispan Client would be ensured to be fully non blocking and integrate with BlockHound to ensure client apps behave properly. &lt;/div&gt; &lt;/div&gt;&lt;/col&gt;&lt;/colgroup&gt;&lt;/table&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/dAhRmEXXM10" height="1" width="1" alt=""/&gt;</content><summary>As many you are probably aware recent trends have shown that making applications non blocking provides quite a few benefits allowing for greater scalability with less resources. Infinispan has been written and rewriting parts to take advantage of this as we can for both embedded and server use cases. Before Infinispan 11 The Infinispan Server has always utilized netty, however we may not have been...</summary><dc:creator>William Burns</dc:creator><dc:date>2020-08-31T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/08/31/nonblocking_nearing/</feedburner:origLink></entry><entry><title>Introducing IDE support for Apache Camel K Modeline</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/gZdFGCGxzOQ/" /><category term="apache camel" scheme="searchisko:content:tags" /><category term="Camel K" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="Eclipse IDE" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="integration patterns" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="serverless" scheme="searchisko:content:tags" /><author><name>Aur√©lien Pupier</name></author><id>searchisko:content:id:jbossorg_blog-introducing_ide_support_for_apache_camel_k_modeline</id><updated>2020-08-31T07:00:38Z</updated><published>2020-08-31T07:00:38Z</published><content type="html">&lt;p&gt;&lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/"&gt;Apache Camel K&lt;/a&gt; is a lightweight integration framework built on &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/"&gt;Apache Camel&lt;/a&gt; that runs natively on &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;. Camel K is designed explicitly for &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless&lt;/a&gt; and &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; architectures and allows you to run an integration written in &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/manual/latest/dsl.html"&gt;Camel DSL&lt;/a&gt; on your cloud.&lt;/p&gt; &lt;p&gt;Since &lt;a href="https://camel.apache.org/blog/2020/06/camel-k-release-1.0.0/"&gt;Apache Camel K 1.0.0&lt;/a&gt;, it has been possible to specify the configuration options for starting an integration route using &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/cli/modeline.html"&gt;Apache Camel K Modeline&lt;/a&gt;. Just place a single comment line, &lt;code&gt;// camel-k:&lt;/code&gt;, at the top of your config file. Using this method allows you to specify a relatively complex integration project in a single file.&lt;/p&gt; &lt;p&gt;Until now, you could only access these configuration options through the command line. In this article, I introduce the new IDE support for Apache Camel K&amp;#8217;s Modeline configuration.&lt;/p&gt; &lt;h2&gt;IDE support for Camel K Modeline&lt;/h2&gt; &lt;p&gt;Thanks to the &lt;a target="_blank" rel="nofollow" href="https://github.com/camel-tooling/camel-language-server/"&gt;Apache Camel Language Server&lt;/a&gt;, you can now use an extension to add Camel K Modeline support to &lt;a target="_blank" rel="nofollow" href="https://code.visualstudio.com/"&gt;Visual Studio Code&lt;/a&gt; (VS Code), &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/ide/"&gt;Eclipse desktop IDEs&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;The &lt;a target="_blank" rel="nofollow" href="https://camel.apache.org/camel-k/latest/cli/modeline.html"&gt;most useful Modeline options&lt;/a&gt; are available as completions. As shown in Figure 1, you can use the &lt;i&gt;hover&lt;/i&gt; feature to view the completions and documentation for these features in VS Code.&lt;/p&gt; &lt;div id="attachment_747757" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png"&gt;&lt;img aria-describedby="caption-attachment-747757" class="wp-image-747757" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png" alt="A screenshot of the completion for a Modeline option name." width="640" height="359" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45.png 1005w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-43-45-768x431.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747757" class="wp-caption-text"&gt;Figure 1: Use the hover feature to view Modeline completions in your IDE.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Let&amp;#8217;s take a look at the completions and definitions for three key options available with the Modeline configuration: trait, dependency, and property.&lt;/p&gt; &lt;h3&gt;Trait&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;trait&lt;/em&gt; option proposes a completion for trait definition names and trait property names. Hovering over a trait name or property name displays its documentation. Figure 2 shows all of the trait completion options and a definition for one of them.&lt;/p&gt; &lt;div id="attachment_747747" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png"&gt;&lt;img aria-describedby="caption-attachment-747747" class="wp-image-747747" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png" alt="The completion options for a trait." width="640" height="359" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17.png 1005w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17-300x168.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-17-768x431.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747747" class="wp-caption-text"&gt;Figure 2: Trait completion options and a definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 3 shows the completion options and a definition for a trait property.&lt;/p&gt; &lt;div id="attachment_747737" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png"&gt;&lt;img aria-describedby="caption-attachment-747737" class="wp-image-747737" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png" alt="The completions for a trait property name." width="640" height="266" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35.png 990w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35-300x125.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-35-768x320.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747737" class="wp-caption-text"&gt;Figure 3: Trait property completion options.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Dependency&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;dependency&lt;/em&gt; option suggests Camel artifact IDs and a template for other Maven-specified dependencies, as shown in Figure 4.&lt;/p&gt; &lt;div id="attachment_747727" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png"&gt;&lt;img aria-describedby="caption-attachment-747727" class="wp-image-747727" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png" alt="Dependency completions." width="640" height="266" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52.png 990w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52-300x125.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-44-52-768x320.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747727" class="wp-caption-text"&gt;Figure 4: The completion options for Camel and Maven dependencies.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Property&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;property&lt;/em&gt; option offers completions for Camel components and properties. You can use the hover feature to view the documentation for any selected element. Figure 5 shows the completion options for Camel components.&lt;/p&gt; &lt;div id="attachment_747707" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55.png"&gt;&lt;img aria-describedby="caption-attachment-747707" class="wp-image-747707 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-1024x396.png" alt="Completions for Camel components." width="640" height="248" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-1024x396.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-300x116.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55-768x297.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-45-55.png 1129w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747707" class="wp-caption-text"&gt;Figure 5: Hover over a component to view its definition.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Even an integration that requires specific configurations can be contained in one file.&lt;/p&gt; &lt;p&gt;Figure 6 shows the completion options for a Camel property.&lt;/p&gt; &lt;div id="attachment_747697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05.png"&gt;&lt;img aria-describedby="caption-attachment-747697" class="wp-image-747697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-1024x396.png" alt="Completions for a Camel component property." width="640" height="248" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-1024x396.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-300x116.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05-768x297.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/07/Screenshot-from-2020-07-06-16-46-05.png 1129w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-747697" class="wp-caption-text"&gt;Figure 6: Hover over a property to view its definition.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Overriding configuration options during development&lt;/h2&gt; &lt;p&gt;Modeline&amp;#8217;s configuration includes the production configuration, which is a useful feature. During development, you can use additional or different parameters. You can manually launch the integration from the command line with the additional parameters. Doing this avoids modifying the source code.&lt;/p&gt; &lt;p&gt;If you want to launch the same configuration multiple times or share a specific configuration in development with colleagues, you can use VS Code tasks for this purpose. To do this, create a file in your project named &lt;code&gt;tasks.json&lt;/code&gt;¬†and place it in a &lt;code&gt;vscode&lt;/code&gt; folder. You should then be able to use completions to access VS Code tasks that are specific to Camel K.&lt;/p&gt; &lt;p&gt;Here&amp;#8217;s an example:&lt;/p&gt; &lt;pre&gt;{ "version": "2.0.0", "tasks": [ { "label": "Start in dev mode Camel K integration opened in active editor", "type": "camel-k", "dev": true, "file": "${file}", "problemMatcher": [] } ] } &lt;/pre&gt; &lt;p&gt;If you enter the Camel K options that you need, completions provide the available options. When you call the &amp;#8220;Start Apache Camel K integration&amp;#8221; command, you can set the &amp;#8220;use predefined task&amp;#8221; option to launch your task with the configuration that you require.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#38;linkname=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F31%2Fintroducing-ide-support-for-apache-camel-k-modeline%2F&amp;#038;title=Introducing%20IDE%20support%20for%20Apache%20Camel%20K%20Modeline" data-a2a-url="https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/" data-a2a-title="Introducing IDE support for Apache Camel K Modeline"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/"&gt;Introducing IDE support for Apache Camel K Modeline&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/gZdFGCGxzOQ" height="1" width="1" alt=""/&gt;</content><summary>Apache Camel K is a lightweight integration framework built on Apache Camel that runs natively on Kubernetes. Camel K is designed explicitly for serverless and microservices architectures and allows you to run an integration written in Camel DSL on your cloud. Since Apache Camel K 1.0.0, it has been possible to specify the configuration options for starting an integration route using Apache Camel ...</summary><dc:creator>Aur√©lien Pupier</dc:creator><dc:date>2020-08-31T07:00:38Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/31/introducing-ide-support-for-apache-camel-k-modeline/</feedburner:origLink></entry><entry><title>How to Install Red Hat Decision Manager 7.8</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/WMbCF2aOPNE/how-to-install-rhdm-78.html" /><category term="AppDev" scheme="searchisko:content:tags" /><category term="Automate" scheme="searchisko:content:tags" /><category term="Decision Manager" scheme="searchisko:content:tags" /><category term="feed_group_name_global" scheme="searchisko:content:tags" /><category term="feed_name_ericschabell" scheme="searchisko:content:tags" /><category term="JBoss" scheme="searchisko:content:tags" /><author><name>Eric D. Schabell</name></author><id>searchisko:content:id:jbossorg_blog-how_to_install_red_hat_decision_manager_7_8</id><updated>2020-08-31T05:00:03Z</updated><published>2020-08-31T05:00:00Z</published><content type="html">&lt;div dir="ltr" style="text-align: left;" trbidi="on"&gt;&lt;div style="margin: 0px;"&gt;&lt;a href="https://1.bp.blogspot.com/-cx9_jd_GvKs/XiAi_Q0TWTI/AAAAAAAAw2o/TnMQmCftBw0426Hhw6dp1WumTaIH1BxygCNcBGAsYHQ/s1600/rhdm-login.png" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"&gt;&lt;img alt="red hat decision manager" border="0" data-blogger-escaped-data-original-height="922" data-blogger-escaped-data-original-width="1600" height="184" src="https://1.bp.blogspot.com/-cx9_jd_GvKs/XiAi_Q0TWTI/AAAAAAAAw2o/TnMQmCftBw0426Hhw6dp1WumTaIH1BxygCNcBGAsYHQ/s320/rhdm-login.png" style="cursor: move;" title="" width="320" /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;div style="margin: 0px;"&gt;Time for another update on installing the Red Hat Decision Manager with my easy install project.&amp;nbsp;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Installing the latest decision tooling for your development projects in just minutes on your very own machine has never been easier.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;It's done in just three easy steps, so let's take a closer look and see if I'm pulling your leg or telling the truth about how easy this installation can be.&lt;/div&gt;&lt;/div&gt;&lt;a name='more'&gt;&lt;/a&gt;&lt;br /&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Just three easy steps to a fully installed and configured Red Hat Decision Manager.&lt;/div&gt;&lt;h2 data-blogger-escaped-data-sourcepos="6:1-8:122" dir="auto"&gt;&lt;a href="https://1.bp.blogspot.com/-fhYo3RRwnLc/Xir9iQUe8EI/AAAAAAAAw4I/Yk3JWfgbEtkOR_WmBUc4KcHPFno5h_QegCNcBGAsYHQ/s1600/rhdm-decision-central.png" imageanchor="1" style="clear: right; float: right; margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img alt="red hat decsion management" border="0" data-blogger-escaped-data-original-height="939" data-blogger-escaped-data-original-width="1599" height="187" src="https://1.bp.blogspot.com/-fhYo3RRwnLc/Xir9iQUe8EI/AAAAAAAAw4I/Yk3JWfgbEtkOR_WmBUc4KcHPFno5h_QegCNcBGAsYHQ/s320/rhdm-decision-central.png" style="cursor: move;" title="" width="320" /&gt;&lt;/a&gt;&amp;nbsp; Install on your machine&lt;/h2&gt;&lt;div style="margin: 0px;"&gt;There are a few component you'll need to download for free from the provided developers site, then obtain the project linked below, add the downloads, and run the installation script.&lt;/div&gt;&lt;div style="text-align: right;"&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Watch the installation unfold before your eyes, with configuration, settings, and user creation all detailed in the script output so you can learn from the installation.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;div style="margin: 0px;"&gt;Give it a try with these three steps:&lt;/div&gt;&lt;ol&gt;&lt;li data-blogger-escaped-data-sourcepos="8:1-9:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="8:4-8:120"&gt;&lt;div style="margin: 0px;"&gt;&lt;a data-blogger-escaped-target="_blank" href="https://gitlab.com/bpmworkshop/rhdm-install-demo/-/archive/master/rhdm-install-demo-master.zip"&gt;Download and unzip.&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-blogger-escaped-data-sourcepos="10:1-11:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="10:4-10:81"&gt;&lt;div style="margin: 0px;"&gt;Add products to installs directory, see installs/README for details and links.&lt;/div&gt;&lt;/div&gt;&lt;/li&gt;&lt;li data-blogger-escaped-data-sourcepos="14:1-15:0"&gt;&lt;div data-blogger-escaped-data-sourcepos="12:4-12:90"&gt;&lt;div style="margin: 0px;"&gt;Run 'init.sh' or 'init.bat' file. 'init.bat' must be run with Administrative privileges&lt;/div&gt;&lt;/div&gt;&lt;div data-blogger-escaped-data-sourcepos="12:4-12:90"&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&amp;nbsp;Log in to http://localhost:8080/decision-central (u:erics / p:redhatdm1!)&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;That's it, not it's time to enjoy your installed and configured Red Hat Decision Manager.&lt;/div&gt;&lt;div style="margin: 0px;"&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style="margin: 0px;"&gt;Not sure how to get started with decision management and&amp;nbsp;business logic? Try this&amp;nbsp;&lt;a href="https://bpmworkshop.gitlab.io/rhdm/index.html" rel=" noreferrer noopener" target="_blank"&gt;online workshop&lt;/a&gt;&amp;nbsp;to build a first project from scratch.&lt;/div&gt;&lt;/div&gt;&lt;div class="feedflare"&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:yIl2AUoC8zA"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=yIl2AUoC8zA" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:63t7Ie-LG7Y"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=63t7Ie-LG7Y" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:4cEx4HpKnUU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kyxDCs1qLKY:YKe6LX0B954:4cEx4HpKnUU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:F7zBnMyn0Lo"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kyxDCs1qLKY:YKe6LX0B954:F7zBnMyn0Lo" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:V_sGLiPBpWU"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kyxDCs1qLKY:YKe6LX0B954:V_sGLiPBpWU" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:qj6IDK7rITs"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?d=qj6IDK7rITs" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;a href="http://feeds.feedburner.com/~ff/schabell/jboss?a=kyxDCs1qLKY:YKe6LX0B954:gIN9vFwOqvQ"&gt;&lt;img src="http://feeds.feedburner.com/~ff/schabell/jboss?i=kyxDCs1qLKY:YKe6LX0B954:gIN9vFwOqvQ" border="0"&gt;&lt;/img&gt;&lt;/a&gt; &lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/schabell/jboss/~4/kyxDCs1qLKY" height="1" width="1" alt=""/&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/WMbCF2aOPNE" height="1" width="1" alt=""/&gt;</content><summary>Time for another update on installing the Red Hat Decision Manager with my easy install project.¬† Installing the latest decision tooling for your development projects in just minutes on your very own machine has never been easier. It's done in just three easy steps, so let's take a closer look and see if I'm pulling your leg or telling the truth about how easy this installation can be. Just three ...</summary><dc:creator>Eric D. Schabell</dc:creator><dc:date>2020-08-31T05:00:00Z</dc:date><feedburner:origLink>http://feedproxy.google.com/~r/schabell/jboss/~3/kyxDCs1qLKY/how-to-install-rhdm-78.html</feedburner:origLink></entry><entry><title>Keycloak 11.0.2 released</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/dJlTu_mw13s/keycloak-1102-released.html" /><category term="feed_group_name_keycloak" scheme="searchisko:content:tags" /><category term="feed_name_keycloak" scheme="searchisko:content:tags" /><category term="Keycloak Release" scheme="searchisko:content:tags" /><author><name>Keycloak</name></author><id>searchisko:content:id:jbossorg_blog-keycloak_11_0_2_released</id><updated>2020-08-31T00:00:00Z</updated><published>2020-08-31T00:00:00Z</published><content type="html">&lt;p&gt;To download the release go to &lt;a href="https://www.keycloak.org//downloads.html"&gt;Keycloak downloads&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;All resolved issues&lt;/h2&gt; &lt;p&gt;The full list of resolved issues are available in &lt;a href="https://issues.jboss.org/issues/?jql=project%20%3D%20keycloak%20and%20fixVersion%20%3D%2011.0.2"&gt;JIRA&lt;/a&gt;&lt;/p&gt; &lt;h2&gt;Upgrading&lt;/h2&gt; &lt;p&gt;Before you upgrade remember to backup your database and check the &lt;a href="https://www.keycloak.org//docs/latest/upgrading/index.html"&gt;upgrade guide&lt;/a&gt; for anything that may have changed.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/dJlTu_mw13s" height="1" width="1" alt=""/&gt;</content><summary>To download the release go to Keycloak downloads. All resolved issues The full list of resolved issues are available in JIRA Upgrading Before you upgrade remember to backup your database and check the upgrade guide for anything that may have changed.</summary><dc:creator>Keycloak</dc:creator><dc:date>2020-08-31T00:00:00Z</dc:date><feedburner:origLink>https://www.keycloak.org//2020/08/keycloak-1102-released.html</feedburner:origLink></entry><entry><title>The developer Conference Sao Paulo</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/g0v0rJ6uahI/" /><category term="event" scheme="searchisko:content:tags" /><category term="feed_group_name_infinispan" scheme="searchisko:content:tags" /><category term="feed_name_infinispan" scheme="searchisko:content:tags" /><category term="learning" scheme="searchisko:content:tags" /><category term="Presentation" scheme="searchisko:content:tags" /><category term="quarkus" scheme="searchisko:content:tags" /><category term="TDC" scheme="searchisko:content:tags" /><category term="tutorial" scheme="searchisko:content:tags" /><author><name>Gustavo Lira e Silva</name></author><id>searchisko:content:id:jbossorg_blog-the_developer_conference_sao_paulo</id><updated>2020-08-28T12:41:19Z</updated><published>2020-08-28T12:00:00Z</published><content type="html">&lt;div id="preamble"&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Dear Infinispan community,&lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class="sect1"&gt; &lt;h2 id="_what_is_the_developers_conference"&gt;&lt;a class="anchor" href="#_what_is_the_developers_conference" /&gt;What is The Developer‚Äôs Conference?&lt;/h2&gt; &lt;div class="sectionbody"&gt; &lt;div class="paragraph"&gt; &lt;p&gt;The Developer‚Äôs Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it‚Äôs realized.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;TDC is a very dynamic conference aimed to present the most important topics according to local and international needs and, for this reason, there are more than ten parallel tracks a day.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;This event takes place once a year in some cities in Brazil, but this year the event will be totally online due to COVID-19 impact.&lt;/p&gt; &lt;/div&gt; &lt;div class="paragraph"&gt; &lt;p&gt;Red Hat will be present on this event with 6 principal lectures and one room occurring simultaneously throughout the event. We will have an Infinispan presentation showing some important features, what‚Äôs new, demos and Quarkus integration at Red Hat sponsor room.&lt;/p&gt; &lt;/div&gt; &lt;div class="sect4"&gt; &lt;h5 id="_when_the_infinispan_presentation_will_happen"&gt;&lt;a class="anchor" href="#_when_the_infinispan_presentation_will_happen" /&gt;When the Infinispan presentation will happen?&lt;/h5&gt; &lt;table class="tableblock frame-all grid-all stretch table"&gt; &lt;caption class="title"&gt;Table 1. Friday, 28th August&lt;/caption&gt; &lt;colgroup&gt; &lt;col style="width: 50%;"&gt; &lt;col style="width: 50%;"&gt; &lt;/col&gt; &lt;thead&gt; &lt;tr&gt; &lt;th class="tableblock halign-left valign-top"&gt;Hour&lt;/th&gt; &lt;th class="tableblock halign-left valign-top"&gt;Timezone&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;16h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BRT (GMT-3)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;17h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;EDT (UTC-4)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;20h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;BST (UTC+1)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;21h40&lt;/p&gt;&lt;/td&gt; &lt;td class="tableblock halign-left valign-top"&gt;&lt;p class="tableblock"&gt;CEST (UTC+2)&lt;/p&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;/col&gt; &lt;/colgroup&gt; &lt;/table&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/g0v0rJ6uahI" height="1" width="1" alt=""/&gt;</content><summary>Dear Infinispan community, What is The Developer‚Äôs Conference? The Developer‚Äôs Conference (TDC) is the largest event related to software development in Brazil connecting meetup and event organizers, speakers, companies and sponsors on a single platform, empowering the local ecosystem of each region it‚Äôs realized. TDC is a very dynamic conference aimed to present the most important topics according...</summary><dc:creator>Gustavo Lira e Silva</dc:creator><dc:date>2020-08-28T12:00:00Z</dc:date><feedburner:origLink>http://infinispan.org/blog/2020/08/28/infinispan-tdc-sp/</feedburner:origLink></entry><entry><title>Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ngtm6iB5-x8/" /><category term="CodeReady Workspaces" scheme="searchisko:content:tags" /><category term="Developer Tools" scheme="searchisko:content:tags" /><category term="Eclipse Che" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="IntelliJ IDE" scheme="searchisko:content:tags" /><category term="Java" scheme="searchisko:content:tags" /><category term="javascript" scheme="searchisko:content:tags" /><category term="open source" scheme="searchisko:content:tags" /><category term="Python" scheme="searchisko:content:tags" /><category term="Snyk" scheme="searchisko:content:tags" /><category term="VS Code" scheme="searchisko:content:tags" /><category term="vulnerability database" scheme="searchisko:content:tags" /><author><name>Darshan Vandra</name></author><id>searchisko:content:id:jbossorg_blog-vulnerability_analysis_with_red_hat_codeready_dependency_analytics_and_snyk_intel</id><updated>2020-08-28T07:00:28Z</updated><published>2020-08-28T07:00:28Z</published><content type="html">&lt;p&gt;Red Hat CodeReady Dependency Analytics is a hosted service on OpenShift that provides vulnerability and compliance analysis for your applications, directly from your IDE. It automatically analyzes your software composition and provides recommendations to address security holes and licensing issues. The 0.1 release of CodeReady Dependency Analytics includes access to the &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/vulnerability-database/"&gt;Snyk Intel Vulnerability Database&lt;/a&gt;, which is a curated database of both unique and known open source software security advisories.&lt;/p&gt; &lt;p&gt;In this article, we&amp;#8217;ll look at how the newest release of CodeReady Dependency Analytics improves your ability to detect, identify, and fix security vulnerabilities in your code through this integration.&lt;/p&gt; &lt;h2&gt;The Snyk database&lt;/h2&gt; &lt;p&gt;Snyk Intel is a fast, current, and complete vulnerability database used to proactively find and fix vulnerabilities and license violations in open source dependencies and container images. This database is continuously curated by an experienced team of security researchers and covers a wide range of vulnerabilities. Integrating CodeReady Dependency Analytics with Snyk helps developers increase their efficiency at containing open source security issues without losing their focus on development.&lt;/p&gt; &lt;p&gt;As shown in Figure 1, Snyk supports vulnerability reporting for most major programming languages and platforms.&lt;/p&gt; &lt;div id="attachment_769917" style="width: 546px" class="wp-caption aligncenter"&gt;&lt;img aria-describedby="caption-attachment-769917" class="wp-image-769917" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage.png" alt="Programming languages in the Snyk ecosystem include Java, Python, Rust, and .NET." width="536" height="275" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage.png 863w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage-300x154.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Snyk_Intel_ecosystem_coverage-768x394.png 768w" sizes="(max-width: 536px) 100vw, 536px" /&gt;&lt;p id="caption-attachment-769917" class="wp-caption-text"&gt;Figure 1: Languages and platforms in the Snyk ecosystem.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Expanded vulnerability analysis in the IDE&lt;/h2&gt; &lt;p&gt;Just as with previous releases, opening an application manifest file in your IDE automatically triggers dependency analysis. But in this release, the summarized vulnerability information shows separate counts for commonly known software vulnerabilities, as well as security advisories that are uniquely identified by Snyk. The IDE then shows the recommended software package version to fix the vulnerability. The demo in Figure 2 shows how to access vulnerability data and recommendations from the manifest file.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/a46X6-tpv2o?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Improved stack analysis&lt;/h2&gt; &lt;p&gt;With this release, we&amp;#8217;ve also refreshed the CodeReady Dependency Analytics stack analysis report. When you launch a report, the &lt;b&gt;Security Issues&lt;/b&gt; card now shows the number of vulnerable direct dependencies and the total count of vulnerabilities across them.&lt;/p&gt; &lt;p&gt;When you expand the &lt;b&gt;Security Issues&lt;/b&gt; card, it presents separate tabs for public vulnerabilities that are commonly known and vulnerabilities that are uniquely identified by Snyk. Each tab shows a list of direct dependencies that have one or more vulnerabilities. Expanding the tab lets you see the details for each direct dependency. If a direct dependency has vulnerabilities due to its &lt;a href="https://developers.redhat.com/blog/2019/10/15/whats-new-in-red-hat-dependency-analytics/"&gt;transitive dependencies&lt;/a&gt;, then you can drill down further into those details. The demo in Figure 3 shows how to access the range of information available in the new stack analysis report.&lt;/p&gt; &lt;p&gt;&lt;iframe class='youtube-player' type='text/html' width='640' height='360' src='https://www.youtube.com/embed/8hu644hcjh8?version=3&amp;#038;rel=1&amp;#038;fs=1&amp;#038;autohide=2&amp;#038;showsearch=0&amp;#038;showinfo=1&amp;#038;iv_load_policy=1&amp;#038;wmode=transparent' allowfullscreen='true' style='border:0;'&gt;&lt;/iframe&gt;&lt;/p&gt; &lt;h2&gt;Viewing vulnerabilities&lt;/h2&gt; &lt;p&gt;CodeReady Dependency Analytics now provides a clickable hyperlink for each commonly known vulnerability, which leads to the relevant Snyk vulnerability page. If you want to see additional details, such as known exploits for the vulnerability, you can register or sign-in to Snyk from this page. Figure 4 shows a common vulnerability page on the Snyk website.&lt;/p&gt; &lt;div id="attachment_769987" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk.png"&gt;&lt;img aria-describedby="caption-attachment-769987" class="wp-image-769987 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-1024x857.png" alt="A screenshot of the Sandbox Bypass vulnerability page on the Snyk website." width="640" height="536" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-1024x857.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-300x251.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk-768x643.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/vulnerability-unique-to-snyk.png 1530w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769987" class="wp-caption-text"&gt;Figure 4: The Sandbox Bypass vulnerability page on the Snyk website.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Currently, you can access details about vulnerabilities unique to Snyk only from the Snyk website, which is shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_770027" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35.png"&gt;&lt;img aria-describedby="caption-attachment-770027" class="wp-image-770027 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-1024x576.png" alt="An example Snyk stack analysis report" width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-1024x576.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-300x169.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-07-29-14-46-35-768x432.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-770027" class="wp-caption-text"&gt;Figure 5: The stack analysis report lists dependencies and vulnerabilities unique to your application stack.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Advanced analysis and triage&lt;/h2&gt; &lt;p&gt;Along with great vulnerability detection and fast identification, &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/open-source-security-management/"&gt;Snyk Open Source Security Management&lt;/a&gt; and &lt;a target="_blank" rel="nofollow" href="https://snyk.io/product/container-vulnerability-management/"&gt;Snyk Container&lt;/a&gt; also provide advanced capabilities for analysis and triage as shown in Figure 6. These tools let you make data-driven decisions and quickly fix security issues and reduce security exposure. As an example, you can use Snyk&amp;#8217;s exploit maturity indicators to identify vulnerabilities that attackers could easily weaponize. This includes exploit maturity indicators to identify vulnerabilities that are easy for attackers to weaponize, and quick remediation with powerful fix advice.&lt;/p&gt; &lt;div id="attachment_770037" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37.png"&gt;&lt;img aria-describedby="caption-attachment-770037" class="wp-image-770037" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-263x300.png" alt="Exploit details on the Snyk website." width="640" height="731" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-263x300.png 263w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37-768x877.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/Screenshot-from-2020-08-05-10-27-37.png 792w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-770037" class="wp-caption-text"&gt;Figure 6: Snyk&amp;#8217;s analysis page shows the exploit&amp;#8217;s details.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In upcoming versions of CodeReady Dependency Analytics, developers registered with Snyk will have easier access to Snyk&amp;#8217;s advanced analysis, including exploit maturity, vulnerable functions, existing patches, and malicious information about vulnerabilities.&lt;/p&gt; &lt;h2&gt;Try CodeReady Dependency Analytics&lt;/h2&gt; &lt;p&gt;CodeReady Dependency Analytics is available as an IDE plugin for &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;Visual Studio Code&lt;/a&gt; (VS Code), &lt;a target="_blank" rel="nofollow" href="https://www.eclipse.org/che/"&gt;Eclipse Che&lt;/a&gt;, &lt;a href="https://developers.redhat.com/products/codeready-workspaces/overview"&gt;Red Hat CodeReady Workspaces&lt;/a&gt;, and &lt;a target="_blank" rel="nofollow" href="https://plugins.jetbrains.com/plugin/12541-dependency-analytics/"&gt;IntelliJ-based IDEs&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;Follow these links to get the CodeReady Dependency Analytics IDE extension and provide your feedback.&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Get the &lt;a target="_blank" rel="nofollow" href="https://marketplace.visualstudio.com/items?itemName=redhat.fabric8-analytics"&gt;VS Code extension&lt;/a&gt; for CodeReady Dependency Analytics.&lt;/li&gt; &lt;li&gt;Get the &lt;a target="_blank" rel="nofollow" href="https://plugins.jetbrains.com/plugin/12541-dependency-analytics/"&gt;IntelliJ IDE extension&lt;/a&gt; for CodeReady Dependency Analytics.&lt;/li&gt; &lt;li&gt;Access CodeReady Dependency Analytics via the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8-analytics/fabric8-analytics-server/tree/master/api_specs/v2"&gt;fabric8-analytics-server&lt;/a&gt; API.&lt;/li&gt; &lt;li&gt;Provide your feedback on the &lt;a target="_blank" rel="nofollow" href="https://github.com/fabric8-analytics/fabric8-analytics-vscode-extension/issues"&gt;Git issues repository&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p&gt;We look forward to your feedback about this release of CodeReady Dependency Analytics. Stay tuned for further updates.&lt;/p&gt; &lt;p style="padding-left: 40px;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: The fabric8 Maven Plugin is now &lt;a href="https://developers.redhat.com/blog/2020/08/26/cloud-native-java-applications-made-easy-eclipse-jkube-1-0-0-now-available"&gt;Eclipse JKube&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About Snyk&lt;/h2&gt; &lt;p&gt;Snyk is a developer-first security company that helps software-driven businesses develop fast and stay secure. Snyk&amp;#8217;s solution is built on Snyk Intel, a comprehensive, proprietary vulnerability database, maintained by an expert security research team. With tight integration into existing developer workflows, source control, and CI/CD pipelines, Snyk enables efficient security workflows and reduces mean-time-to-fix. For more information or to get started with Snyk for free today, visit &lt;a target="_blank" rel="nofollow" href="https://snyk.io"&gt;https://snyk.io&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#38;linkname=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fvulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk%2F&amp;#038;title=Vulnerability%20analysis%20with%20Red%20Hat%20CodeReady%20Dependency%20Analytics%20and%20Snyk%20Intel" data-a2a-url="https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/" data-a2a-title="Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/"&gt;Vulnerability analysis with Red Hat CodeReady Dependency Analytics and Snyk Intel&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ngtm6iB5-x8" height="1" width="1" alt=""/&gt;</content><summary>Red Hat CodeReady Dependency Analytics is a hosted service on OpenShift that provides vulnerability and compliance analysis for your applications, directly from your IDE. It automatically analyzes your software composition and provides recommendations to address security holes and licensing issues. The 0.1 release of CodeReady Dependency Analytics includes access to the Snyk Intel Vulnerability Da...</summary><dc:creator>Darshan Vandra</dc:creator><dc:date>2020-08-28T07:00:28Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/28/vulnerability-analysis-with-red-hat-codeready-dependency-analytics-and-snyk/</feedburner:origLink></entry><entry><title>Enable container-native virtualization on Red Hat OpenShift and AWS</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/ypw-0PXcAuc/" /><category term="container-native" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="Kubernetes" scheme="searchisko:content:tags" /><category term="Kubernetes Operator" scheme="searchisko:content:tags" /><category term="KubeVirt" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="Mac" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="operator" scheme="searchisko:content:tags" /><category term="rhel" scheme="searchisko:content:tags" /><category term="virtual machine" scheme="searchisko:content:tags" /><category term="windows" scheme="searchisko:content:tags" /><author><name>Bryant Son</name></author><id>searchisko:content:id:jbossorg_blog-enable_container_native_virtualization_on_red_hat_openshift_and_aws</id><updated>2020-08-28T07:00:23Z</updated><published>2020-08-28T07:00:23Z</published><content type="html">&lt;p&gt;Imagine an information technology (IT) world where everything is ideal: Every company has switched over to cloud-native applications, every application is containerized, everything is automated, and the IT people see that the world is good. Things are not so ideal in the real world, though, as we know. Applications remain tightly coupled with traditional virtual machine (VM) resources such as software libraries and hardware resources. The effort to migrate them from VMs to &lt;a href="https://developers.redhat.com/topics/containers"&gt;containers&lt;/a&gt; seems insurmountable, requiring years of dedicated spending and hours from developers and software architects.&lt;/p&gt; &lt;p&gt;The dilemma is that companies want all of their applications to eventually run on containers, but they also need to support applications running on VMs until that glorious shift happens. Given that application migration from VMs to containers will happen over the long haul, some companies are exploring a &lt;a href="https://developers.redhat.com/blog/2018/10/18/modernize-your-application-deployment-with-lift-and-shift/"&gt;lift-and-shift approach&lt;/a&gt;. In theory, lift-and-shift would let us migrate tightly-coupled legacy applications to a container platform like &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt;. Rather than rewriting application code, developers would simply write interfaces (essentially, code with patterns) that are compatible with the existing structure.&lt;/p&gt; &lt;p&gt;Unfortunately, this scenario is unrealistic for legacy projects involving hundreds of application modules and packages. Therefore, it is logical to ask: What if there was a way to support existing applications running on virtual machines &lt;i&gt;and&lt;/i&gt; new applications running on containers in one unified container-based platform?&lt;/p&gt; &lt;p&gt;Luckily, there is a way: Use a &lt;a href="https://developers.redhat.com/topics/kubernetes"&gt;Kubernetes&lt;/a&gt;-based platform like OpenShift.&lt;/p&gt; &lt;p&gt;In this article, I introduce &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/topics/containers/what-is-container-native-virtualization"&gt;container-native virtualization&lt;/a&gt; (CNV) in the form of &lt;a href="https://docs.openshift.com/container-platform/4.5/virt/virt-2-4-release-notes.html"&gt;OpenShift Virtualization&lt;/a&gt;, an add-on feature for OpenShift and &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift Container Platform&lt;/a&gt; (OCP). CNV allows you to run and manage virtual-machine workloads alongside container workloads.&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;span style="color: #000000;"&gt;&lt;strong&gt;Note&lt;/strong&gt;: As of version 2.4 when CNV went GA, Container-Native Virtualization was renamed OpenShift Virtualization.&lt;/span&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;&lt;span id="more-742287"&gt;&lt;/span&gt;&lt;/p&gt; &lt;h2&gt;Overview of container-native virtualization&lt;/h2&gt; &lt;p&gt;Based on the open source project &lt;a target="_blank" rel="nofollow" href="https://kubevirt.io/"&gt;KubeVirt&lt;/a&gt;, CNV&amp;#8217;s goal is to help enterprises &lt;a target="_blank" rel="nofollow" href="https://www.redhat.com/en/resources/developer-guide-lift-and-shift-cloud-migration"&gt;move from a VM-based infrastructure to a Kubernetes and container-based stack&lt;/a&gt;, one application at a time. This means that we must be able to treat applications based on traditional VM-based workflows just like we do native Kubernetes applications, including for management and routing. At the same time, many of these applications require a significant amount of VM-native configuration to function.&lt;/p&gt; &lt;p&gt;Container-native virtualization lets you deploy, run, and manage both virtual machines and containers on OpenShift, which is Red Hat&amp;#8217;s Kubernetes-based platform for the enterprise. CNV is currently in &lt;a target="_blank" rel="nofollow" href="https://www.openshift.com/learn/topics/virtualization/"&gt;tech preview&lt;/a&gt;, but you can still install and try it out on OpenShift.&lt;/p&gt; &lt;div id="attachment_769697" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001.jpeg"&gt;&lt;img aria-describedby="caption-attachment-769697" class="wp-image-769697 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-1024x576.jpeg" alt="A Venn diagram with the container and virtual machine overlapping in Kubernetes." width="640" height="360" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-1024x576.jpeg 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-300x169.jpeg 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/CNV.001-768x432.jpeg 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769697" class="wp-caption-text"&gt;Figure 1: Container-native virtualization makes it possible to run a VM inside OpenShift.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;In the next sections, I will show you how to enable container-native virtualization on OpenShift. As a bonus, I will also show you how to install &lt;code&gt;virtctl&lt;/code&gt;, which is the command-line interface (CLI) for managing container-native virtualization resources.&lt;/p&gt; &lt;h2&gt;Prerequisites&lt;/h2&gt; &lt;p&gt;I used the following technologies for this demo:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat OpenShift 4.4.3 on &lt;a target="_blank" rel="nofollow" href="https://aws.amazon.com/ec2/"&gt;Amazon Web Services Elastic Compute Cloud&lt;/a&gt; (AWS EC2)&lt;/li&gt; &lt;li&gt;Red Hat container-native virtualization (CNV) 2.3.0 Tech Preview&lt;/li&gt; &lt;li&gt;MacOS for the &lt;code&gt;virtctl&lt;/code&gt; installation&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Warning&lt;/b&gt;: Please note that CNV looks for hardware virtualization by default. Thus, it requires a bare-metal server instance by default. If you use a non-bare-metal platform (like the default AWS EC2 instance), then you have to switch CNV from hardware virtualization to software emulation. Fortunately, that&amp;#8217;s not hard to do. See my follow-up to this article, &lt;a target="_blank" rel="nofollow" href="CNV-2 URL"&gt;How to enable software emulation in Red Hat OpenShift&amp;#8217;s container-native virtualization&lt;/a&gt; for a guide to switching OpenShift&amp;#8217;s container-native virtualization feature to software emulation.&lt;/p&gt; &lt;h2&gt;Container-native virtualization on OpenShift&lt;/h2&gt; &lt;p&gt;For this installation, I am using Red Hat OpenShift 4.4.3 on Amazon Web Services (AWS). I am also using the OpenShift OperatorHub to install the &lt;b&gt;Container Native Virtualization Operator&lt;/b&gt;. While you can enable CNV on Red Hat OpenShift 3.11 and above, the process is different if you don&amp;#8217;t use the OpenShift OperatorHub. In addition, CNV 2.3.0. from Red Hat OpenShift 4.4.x introduces numerous updates, including the following:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;An enhanced web console provides a graphical portal to manage virtualized resources alongside the OCP cluster containers and infrastructure.&lt;/li&gt; &lt;li&gt;The ability to use container-native virtualization with either the &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/networking/ovn_kubernetes_network_provider/about-ovn-kubernetes.html"&gt;OVN-Kubernetes&lt;/a&gt;¬†or the¬†&lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.5/welcome/index.html"&gt;OpenShiftSDN&lt;/a&gt;¬†network provider.&lt;/li&gt; &lt;li&gt;The ability to import, upload, and clone virtual machine disks into namespaces that are subject to CPU and memory resource restrictions.&lt;/li&gt; &lt;li&gt;The¬†&lt;code&gt;virtctl&lt;/code&gt; tool, which asynchronously monitors server-side upload post-processing. It also more accurately reports the status of &lt;a target="_blank" rel="nofollow" href="https://docs.openshift.com/container-platform/4.4/cnv/cnv_virtual_machines/cnv_virtual_disks/cnv-uploading-local-disk-images-virtctl.html#cnv-uploading-local-disk-images-virtctl"&gt;virtual machine disk uploads&lt;/a&gt;.&lt;/li&gt; &lt;/ul&gt; &lt;p style="padding-left: 40px;"&gt;&lt;b&gt;Note&lt;/b&gt;: See the &lt;a href="https://docs.openshift.com/container-platform/4.4/cnv/cnv_release_notes/cnv-2-3-release-notes.html"&gt;CNV 2.3.0 documentation&lt;/a&gt; to learn more about these and other updates.&lt;/p&gt; &lt;p&gt;With these caveats in mind, let&amp;#8217;s enable CNV on Red Hat OpenShift 4.4.&lt;/p&gt; &lt;h2&gt;Step 1: Install the CNV Operator and CRD&lt;/h2&gt; &lt;p&gt;First, we need to locate &lt;b&gt;Container-native virtualization&lt;/b&gt; in the OpenShift OperatorHub. Enter the keyword &lt;code&gt;cnv&lt;/code&gt; for this search, as shown in Figure 2.&lt;/p&gt; &lt;div id="attachment_742427" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742427" class="wp-image-742427 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-1024x562.png" alt="A screenshot of search results for CNV in the OpenShift Operator Hub." width="640" height="351" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-1024x562.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-300x165.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.51-PM-768x422.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742427" class="wp-caption-text"&gt;Figure 2: Search for CNV in the OpenShift Operator Hub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Click the tile for &lt;b&gt;Container-native virtualization&lt;/b&gt;. This pops up the window shown in Figure 3 with a short introduction to CNV, including its description, the current version, the repository, and so on. Click &lt;b&gt;Install&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742317" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742317" class="wp-image-742317 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-1024x556.png" alt="The pop-up window for the Container-native virtualization Operator in the OperatorHub." width="640" height="348" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-1024x556.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.15.57-PM-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742317" class="wp-caption-text"&gt;Figure 3: Install CNV from the OperatorHub.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As shown in Figure 4, the next screen asks whether you want to subscribe to CNV. Note that on this screen, you can change the version of CNV and the &lt;b&gt;namespace/project&lt;/b&gt; where you want to install your CNV instance. If you have not created a namespace previously, a new namespace called &lt;b&gt;openshift-cnv&lt;/b&gt; will be created, and it will be the default namespace for your CNV deployment. (I did not create a new namespace, so I will leave everything as it is.) Click &lt;b&gt;Subscribe&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742327" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742327" class="wp-image-742327 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-1024x560.png" alt="The window to configure Container-native virtualization Operator Installation." width="640" height="350" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-1024x560.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-300x164.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-26-at-11.16.05-PM-768x420.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742327" class="wp-caption-text"&gt;Figure 4: Configure the CNV installation.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Operator-based installation&lt;/h3&gt; &lt;p&gt;Red Hat OpenShift 4 uses Operator-based installation, so the CNV Operator gathers all of the resources and requirements to prepare for the CNV setup. After waiting for the magic moment, you will see the installation status for your CNV Operator change to &lt;b&gt;Succeeded&lt;/b&gt;, as shown in Figure 5.&lt;/p&gt; &lt;div id="attachment_742437" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1.png"&gt;&lt;img aria-describedby="caption-attachment-742437" class="wp-image-742437 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-1024x539.png" alt="The Installed Operators page, showing that the Containter-native virtualization Operator installation was successful." width="640" height="337" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-1024x539.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/4-1-768x404.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742437" class="wp-caption-text"&gt;Figure 5: The CNV Operator installation was successful.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Some Kubernetes and OpenShift Operators, like &lt;a href="https://developers.redhat.com/blog/2020/06/12/how-to-install-codeready-workspaces-in-a-restricted-openshift-4-environment/"&gt;Red Hat CodeReady Workspaces&lt;/a&gt;, do not immediately initiate deployment. The CNV Operator begins deploying pods immediately after you complete the Operator subscription. Checking for &lt;b&gt;Workloads&lt;/b&gt; &amp;#8211;&amp;#62; &lt;b&gt;Pods&lt;/b&gt; is a good way to confirm the successful subscription before moving on, as shown in Figure 6.&lt;/p&gt; &lt;div id="attachment_742447" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1.png"&gt;&lt;img aria-describedby="caption-attachment-742447" class="wp-image-742447 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-1024x554.png" alt="A screenshot of the running pods for the CNV installation." width="640" height="346" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-1024x554.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/5-1-768x416.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742447" class="wp-caption-text"&gt;Figure 6: Pods should begin deploying immediately.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 2: Create a hyperconverged cluster&lt;/h2&gt; &lt;p&gt;In this step, we will install a hyperconverged cluster. Paraphrasing &lt;a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Hyper-converged_infrastructure"&gt;from Wikipedia&lt;/a&gt;:&lt;/p&gt; &lt;blockquote&gt;&lt;p&gt;&lt;em&gt;Hyperconverged clusters include a hypervisor for virtualized computing, software-defined storage, and virtualized networking, and they typically run on standard, off-the-shelf servers.¬†&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt; &lt;p&gt;Now, let&amp;#8217;s go back to our installed CNV in &lt;b&gt;Installed Operators&lt;/b&gt; and click on it. You will once again see the overview of CNV&amp;#8217;s Operator, including its provider APIs, the documentation link, and actions that you can perform. We are interested in the &lt;b&gt;CNV Operator Deployment&lt;/b&gt; action, so let&amp;#8217;s click that tab, which is shown in Figure 7.&lt;/p&gt; &lt;div id="attachment_742477" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1.png"&gt;&lt;img aria-describedby="caption-attachment-742477" class="wp-image-742477 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-1024x541.png" alt="A screenshot of the Container-native virtualization Operator overview page." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-1024x541.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-300x158.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/6-1-768x406.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742477" class="wp-caption-text"&gt;Figure 7: Inside the container-native virtualization overview page.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;As displayed in Figure 8, there is only one option on this screen, so go ahead and click the &lt;b&gt;Create HyperConverged Cluster&lt;/b&gt; button.&lt;/p&gt; &lt;div id="attachment_742487" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1.png"&gt;&lt;img aria-describedby="caption-attachment-742487" class="wp-image-742487 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-1024x541.png" alt="The Container-native virtualization Operator deployment page with the option to select the click the 'Create HyperConverged Cluster' option." width="640" height="338" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-1024x541.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-300x159.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/7-1-768x406.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742487" class="wp-caption-text"&gt;Figure 8: The CNV Operator deployment.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Next, you will see the &lt;a target="_blank" rel="nofollow" href="https://coreos.com/blog/custom-resource-kubernetes-v17"&gt;custom resource definition&lt;/a&gt; (CRD) file for a HyperConverged cluster. The CRD extends the API with the custom resource concept. It is a stable object that developers can use to create custom controllers and Operators. For a project like container-native virtualization, which is based on KubeVirt, a CRD is an interface for instructing VMs to run on the Kubernetes platform.&lt;/p&gt; &lt;p&gt;As shown in Figure 9, ensure that the file name is &lt;b&gt;kubevirt-hyperconverged&lt;/b&gt;, then click &lt;b&gt;Create&lt;/b&gt; to continue.&lt;/p&gt; &lt;div id="attachment_742497" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1.png"&gt;&lt;img aria-describedby="caption-attachment-742497" class="wp-image-742497 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-1024x555.png" alt="A screenshot of the YAML file for the HyperConverged cluster." width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/8-1-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742497" class="wp-caption-text"&gt;Figure 9: The YAML file for creating a HyperConverged infrastructure.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Creating the CRD essentially installs the HyperConverged cluster. That&amp;#8217;s not so bad, is it? We can now check our pods again to make sure that everything is deployed correctly, with no hiccups.&lt;/p&gt; &lt;div id="attachment_742507" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2.png"&gt;&lt;img aria-describedby="caption-attachment-742507" class="wp-image-742507 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-1024x545.png" alt="The Container-native virtualization Operator's HyperConverged cluster installation page." width="640" height="341" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-1024x545.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-300x160.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/9-2-768x408.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742507" class="wp-caption-text"&gt;Figure 10: Confirm the HyperConverged cluster installation is complete.&lt;/p&gt;&lt;/div&gt; &lt;h3&gt;Troubleshooting pods&lt;/h3&gt; &lt;p&gt;When you check your pods, be sure to monitor any issues that might have come up after the HyperConverged cluster installation. If you see any issues‚Äîsuch as pods stuck in the pending state, showing an &lt;b&gt;Err Image Pull&lt;/b&gt; status, and so on‚Äîyou can go inside the troubled pod and look at its events and logs to discover the possible cause of the problem. If there is no problem, your CNV installation is done.&lt;/p&gt; &lt;div id="attachment_742517" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1.png"&gt;&lt;img aria-describedby="caption-attachment-742517" class="wp-image-742517 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-1024x536.png" alt="A screenshot of the running pods listing for CNV." width="640" height="335" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-1024x536.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-300x157.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/10-1-768x402.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742517" class="wp-caption-text"&gt;Figure 11: Check the pods troubleshoot deployment issues.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Step 3: Take CNV for a test drive&lt;/h2&gt; &lt;p&gt;Let&amp;#8217;s take our installed CNV Operator for a short drive. I will not dive into what you can do with CNV in this article, but we can at least start up a virtual machine&lt;/p&gt; &lt;p&gt;Under &lt;b&gt;Workloads&lt;/b&gt;, click &lt;b&gt;virtual machines&lt;/b&gt;. This brings up a screen where you only see one option right now, which is the &lt;b&gt;Create Virtual Machine&lt;/b&gt; button. Clicking that button leads to a drop-down list where you are given three options: &lt;b&gt;New with Wizard&lt;/b&gt;, &lt;b&gt;Import with Wizard&lt;/b&gt;, and &lt;b&gt;New from YAML&lt;/b&gt;. Select the &lt;b&gt;New with Wizard&lt;/b&gt; option, as shown in Figure 12.&lt;/p&gt; &lt;div id="attachment_742307" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM.png"&gt;&lt;img aria-describedby="caption-attachment-742307" class="wp-image-742307 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-1024x555.png" alt="A screenshot of the options to create a new virtual machine." width="640" height="347" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-1024x555.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-300x163.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-12.16.50-AM-768x417.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742307" class="wp-caption-text"&gt;Figure 12: Go to Workloads, then Virtual Machines to create your first VM through CNV.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Hooray! You see a nice wizard interface where you can create your VM within OpenShift, as shown in Figure 13.&lt;/p&gt; &lt;div id="attachment_742527" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13.png"&gt;&lt;img aria-describedby="caption-attachment-742527" class="wp-image-742527 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-1024x552.png" alt="A screenshot of the window to configure the virtual machine." width="640" height="345" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-1024x552.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-300x162.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/13-768x414.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742527" class="wp-caption-text"&gt;Figure 13: The interface to create a virtual machine using CNV.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;I&amp;#8217;ll introduce what you can do with container-native virtualization in another article soon.&lt;/p&gt; &lt;h2&gt;Installing the virtctl CLI&lt;/h2&gt; &lt;p&gt;Before I wrap up this article, I want to introduce &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;virtctl&lt;/a&gt;, which is CNV&amp;#8217;s command-line utility for managing container-native virtualization resources. While you can use the OpenShift CLI to manage these OpenShift resources, &lt;code&gt;virtctl&lt;/code&gt; lets you interact with the VMs provisioned in an OpenShift or Kubernetes cluster.&lt;/p&gt; &lt;p&gt;In a &lt;a target="_blank" rel="nofollow" href="https://www.centos.org/"&gt;CentOS&lt;/a&gt;&amp;#8211; or &lt;a href="https://developers.redhat.com/topics/linux"&gt;Red Hat Enterprise Linux (RHEL)&lt;/a&gt;-based environment, you can easily use the subscription manager to install &lt;code&gt;virtctl&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;subscription-manager repos --enable {repository} &lt;/pre&gt; &lt;p&gt;Use one of these options for the repository:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;Red Hat Enterprise Linux 8:¬†&lt;code&gt;cnv-2.1-for-rhel-8-x86_64-rpms&lt;/code&gt;&lt;/li&gt; &lt;li&gt;Red Hat Enterprise Linux 7:¬†&lt;code&gt;rhel-7-server-cnv-2.1-rpms&lt;/code&gt;&lt;/li&gt; &lt;/ul&gt; &lt;h3&gt;Installing virtctl on other platforms&lt;/h3&gt; &lt;p&gt;What if you are using an operating system other than RHEL, like macOS, Windows, or another Linux platform? In that case, you can download &lt;code&gt;virtctl&lt;/code&gt; and run it as an executable.&lt;/p&gt; &lt;p&gt;To start, locate the version of &lt;code&gt;virtctl&lt;/code&gt; that you need from the &lt;a href="https://github.com/kubevirt/kubevirt/releases"&gt;GitHub release repository&lt;/a&gt;, which is shown in Figure 14.&lt;/p&gt; &lt;div id="attachment_742537" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742537" class="wp-image-742537 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-1024x504.png" alt="A screenshot of the GitHub repository for virtctl." width="640" height="315" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-1024x504.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-300x148.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.29.43-PM-768x378.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742537" class="wp-caption-text"&gt;Figure 14: Download virtctl from its GitHub repository.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;If you have a tool like &lt;code&gt;wget&lt;/code&gt; or &lt;code&gt;curl&lt;/code&gt;, use the following commands to make the downloaded package executable:&lt;/p&gt; &lt;pre&gt;$ wget -O virtctl https://github.com/kubevirt/kubevirt/releases/download/${KUBEVIRT_VERSION}/virtctl-${KUBEVIRT_VERSION}-linux-amd64 $ chmod +x virtctl &lt;/pre&gt; &lt;h3&gt;A macOS installation&lt;/h3&gt; &lt;p&gt;I am using a MacBook Pro, so I decided to download &lt;code&gt;virtctl&lt;/code&gt; manually. Once I downloaded it, I renamed the file to &lt;b&gt;virtctl&lt;/b&gt; and placed it under a designated directory, as shown in Figure 15.&lt;/p&gt; &lt;div id="attachment_742557" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742557" class="wp-image-742557 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-1024x275.png" alt="A screenshot of the command line interface." width="640" height="172" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-1024x275.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-300x81.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM-768x206.png 768w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.31-PM.png 1296w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742557" class="wp-caption-text"&gt;Figure 15: Put virctl in a place where you won&amp;#8217;t forget it.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;You can make the downloaded file executable by entering the command: &lt;code&gt;chmod +x ./virtctl&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;After that, grab the path and export it in &lt;code&gt;~/.bashrc&lt;/code&gt;, as shown in Figure 16. Once you&amp;#8217;ve done that, &lt;code&gt;virtctl&lt;/code&gt; will be available everywhere by just typing &lt;code&gt;virtctl&lt;/code&gt;.&lt;/p&gt; &lt;div id="attachment_742567" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742567" class="wp-image-742567 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-1024x97.png" alt="A screenshot of the CLI with instructions to export the path to ~/.bashrc." width="640" height="61" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-1024x97.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-300x28.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.37.52-PM-768x72.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742567" class="wp-caption-text"&gt;Figure 16: Add the virtctl path to ~/.bashrc.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Figure 17 shows what happens when I enter the &lt;code&gt;~/.bashrc&lt;/code&gt; command followed by &lt;code&gt;virtctl&lt;/code&gt;:&lt;/p&gt; &lt;div id="attachment_742577" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM.png"&gt;&lt;img aria-describedby="caption-attachment-742577" class="wp-image-742577 size-large" src="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-1024x342.png" alt="A screenshot of the CLI executing virtctl." width="640" height="214" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-1024x342.png 1024w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-300x100.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/06/Screen-Shot-2020-06-27-at-7.39.07-PM-768x257.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-742577" class="wp-caption-text"&gt;Figure 17: Type &lt;code&gt;virtctl&lt;/code&gt; to execute the utility.&lt;/p&gt;&lt;/div&gt; &lt;h2&gt;Conclusion&lt;/h2&gt; &lt;p&gt;I hope this article helped you understand what container-native virtualization is and how you can enable it for Red Hat OpenShift. Look for my next article, where we&amp;#8217;ll dive into what you can do with CNV.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#38;linkname=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F28%2Fenable-container-native-virtualization-on-red-hat-openshift-and-aws%2F&amp;#038;title=Enable%20container-native%20virtualization%20on%20Red%20Hat%20OpenShift%20and%20AWS" data-a2a-url="https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/" data-a2a-title="Enable container-native virtualization on Red Hat OpenShift and AWS"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/"&gt;Enable container-native virtualization on Red Hat OpenShift and AWS&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/ypw-0PXcAuc" height="1" width="1" alt=""/&gt;</content><summary>Imagine an information technology (IT) world where everything is ideal: Every company has switched over to cloud-native applications, every application is containerized, everything is automated, and the IT people see that the world is good. Things are not so ideal in the real world, though, as we know. Applications remain tightly coupled with traditional virtual machine (VM) resources such as soft...</summary><dc:creator>Bryant Son</dc:creator><dc:date>2020-08-28T07:00:23Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/28/enable-container-native-virtualization-on-red-hat-openshift-and-aws/</feedburner:origLink></entry><entry><title>Developing micro-microservices in C on Red Hat OpenShift</title><link rel="alternate" href="http://feedproxy.google.com/~r/jbossbuzz/~3/fPAbaHp29kk/" /><category term="Alpine Linux" scheme="searchisko:content:tags" /><category term="busybox" scheme="searchisko:content:tags" /><category term="C" scheme="searchisko:content:tags" /><category term="Containers" scheme="searchisko:content:tags" /><category term="feed_group_name_nonmiddleware" scheme="searchisko:content:tags" /><category term="feed_name_redhat_developer_blog" scheme="searchisko:content:tags" /><category term="libmicrohttpd" scheme="searchisko:content:tags" /><category term="linux" scheme="searchisko:content:tags" /><category term="microservices" scheme="searchisko:content:tags" /><category term="musl libc" scheme="searchisko:content:tags" /><category term="openshift" scheme="searchisko:content:tags" /><category term="REST web service" scheme="searchisko:content:tags" /><author><name>kboone</name></author><id>searchisko:content:id:jbossorg_blog-developing_micro_microservices_in_c_on_red_hat_openshift</id><updated>2020-08-27T07:00:16Z</updated><published>2020-08-27T07:00:16Z</published><content type="html">&lt;p&gt;&lt;a href="https://developers.redhat.com/topics/enterprise-java"&gt;Java&lt;/a&gt; holds its dominating position in enterprise middleware for good reasons; however, describing anything in Java as &amp;#8220;micro&amp;#8221; requires a generous interpretation. It isn&amp;#8217;t unusual to find Java-based &lt;a href="https://developers.redhat.com/topics/microservices"&gt;microservices&lt;/a&gt; that need half a gigabyte of RAM to provide modest functionality at a modest load. The trend toward &lt;a href="https://developers.redhat.com/topics/serverless-architecture"&gt;serverless architectures&lt;/a&gt;, where services are started and stopped according to demand, does little to improve the situation.&lt;/p&gt; &lt;p&gt;It has recently become possible to compile Java to a native executable using tools like &lt;a href="https://developers.redhat.com/blog/2020/06/05/mandrel-a-community-distribution-of-graalvm-for-the-red-hat-build-of-quarkus/"&gt;GraalVM&lt;/a&gt;. This technique, coupled with an optimized Java runtime like &lt;a href="https://developers.redhat.com/products/quarkus/getting-started"&gt;Quarkus&lt;/a&gt;, tames Java&amp;#8217;s resource consumption to some extent.&lt;/p&gt; &lt;p&gt;Nevertheless, we should not lose sight of programming languages that were designed from the start to compile to native code, with little to no runtime overhead. Languages like &lt;a href="https://developers.redhat.com/blog/category/rust/"&gt;Rust&lt;/a&gt; and &lt;a href="https://developers.redhat.com/blog/category/go/"&gt;Go&lt;/a&gt; have become popular, and justifiably so. For optimal runtime resource usage and millisecond startup times, though, it remains hard to beat &lt;a href="https://developers.redhat.com/topics/c/"&gt;C&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;span id="more-740807"&gt;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;Comparatively few people in the IT industry have experience implementing middleware components in C. This fact is ironic because C is an ideal vehicle for implementing truly micro microservices. Using &lt;a href="https://developers.redhat.com/topics/containers/"&gt;containers&lt;/a&gt; removes one of the main disincentives to using C‚Äîlack of cross-platform compatibility at the binary level. Similar to the JVM for Java programs, the container is the runtime environment for native code.&lt;/p&gt; &lt;p&gt;This article discusses some of the implications of implementing a REST-based web service in C. My example is a component called &lt;code&gt;solunar_ws&lt;/code&gt; that calculates sun- and moonrise and sets times at any location on any day. I have deliberately chosen an example that is self-contained, but which does real computational work. With 8,000-or-so lines of C code, this example is a good deal more complex than a &amp;#8220;Hello, World.&amp;#8221; Still, the complete executable, including all of its dependencies, is less than 1MB in size. Even under load, its memory usage is measured in kilobytes. The total container image size is about 10MB, and that includes 3MB of necessary data.&lt;/p&gt; &lt;p&gt;See my &lt;a target="_blank" rel="nofollow" href="https://github.com/kevinboone/solunar_ws"&gt;GitHub repository&lt;/a&gt; for the complete source code. That is also where you&amp;#8217;ll find instructions for building and deploying the example on &lt;a href="https://developers.redhat.com/products/openshift/getting-started"&gt;Red Hat OpenShift&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;About the web service&lt;/h2&gt; &lt;p&gt;This article isn&amp;#8217;t about astronomical computation, so I won&amp;#8217;t describe the program&amp;#8217;s internal operations.&lt;/p&gt; &lt;p&gt;As I mentioned earlier, the &lt;code&gt;solunar_ws&lt;/code&gt; component is a REST-based web service that provides sun- and moonrise and set information in a specific city on a specified day. It is invoked using a URL of this form:&lt;/p&gt; &lt;pre&gt;http://host:8080/day/[city]/[date]&lt;/pre&gt; &lt;p&gt;This URL produces results in JSON format, where &lt;code&gt;city&lt;/code&gt; is a name like &lt;code&gt;london&lt;/code&gt;, &lt;code&gt;minsk&lt;/code&gt;, or &lt;code&gt;detroit&lt;/code&gt;, and the &lt;code&gt;date&lt;/code&gt; is in the form &lt;code&gt;aug 20 2020&lt;/code&gt; (and escaped according to the usual HTTP rules).&lt;/p&gt; &lt;p&gt;The &lt;code&gt;solunar_ws&lt;/code&gt; component uses &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/libmicrohttpd/"&gt;GNU libmicrohttpd&lt;/a&gt; as its HTTP engine. This is a well-established, lightweight HTTP library that hands incoming requests to a programmer-defined handler function (a bit like the &lt;code&gt;Servlet&lt;/code&gt; interface in Java).&lt;/p&gt; &lt;p&gt;I&amp;#8217;ve chosen the libmicrohttpd library because of its small size and low resource usage. An alternative approach would be to implement the web service as a plugin for &lt;a target="_blank" rel="nofollow" href="https://httpd.apache.org/"&gt;Apache HTTPD&lt;/a&gt;. Apache HTTPD is more battle-hardened and might be a better choice in hostile environments. In any case, the computation code would be unchanged.&lt;/p&gt; &lt;h2&gt;About the container&lt;/h2&gt; &lt;p&gt;The web service resides in a Linux container (examples include docker, &lt;a href="https://developers.redhat.com/articles/podman-next-generation-linux-container-tools"&gt;Podman&lt;/a&gt;, and &lt;a href="https://developers.redhat.com/courses/red-hat-enterprise-linux/containers-buildah"&gt;Buildah&lt;/a&gt;) that can be deployed on OpenShift. Although I do most of my development on &lt;a target="_blank" rel="nofollow" href="https://getfedora.org/"&gt;Fedora&lt;/a&gt;, even the lightest mainstream Fedora image provides considerably more functionality than this microservice requires. Consequently, the container&amp;#8217;s base layer is Alpine Linux.&lt;/p&gt; &lt;p&gt;Alpine&amp;#8217;s base layer is only about 6MB in size. This is because it uses BusyBox to provide a shell and utilities, and these are built against the &lt;a target="_blank" rel="nofollow" href="https://musl.libc.org/"&gt;MUSL C library&lt;/a&gt;, not &lt;a target="_blank" rel="nofollow" href="https://www.gnu.org/software/libc/"&gt;glibc&lt;/a&gt;. MUSL is a minimal, POSIX-compliant C standard library. In principle, there&amp;#8217;s nothing preventing us from linking the web service application against glibc and including the glibc binaries in the image. However, the whole purpose of this exercise is to create the smallest possible image; including an additional three megabytes in a second standard C library won&amp;#8217;t help us achieve that goal.&lt;/p&gt; &lt;h2&gt;Challenges&lt;/h2&gt; &lt;p&gt;Building a microservice in C for Alpine presents some challenges, which I&amp;#8217;ll discuss next. However, since the challenges involved in writing good-quality, serviceable C code are already well-known, they are outside the scope of this article.&lt;/p&gt; &lt;h3&gt;BusyBox&lt;/h3&gt; &lt;p&gt;That the Alpine image uses BusyBox rather than the GNU core utilities (coreutils) has potential implications for how we build containers. It&amp;#8217;s common to build a container image using a Dockerfile full of chained shell commands. Using a lightweight base layer doesn&amp;#8217;t change this practice in principle, but the commands might be different or have different options. Practically speaking, I haven&amp;#8217;t found any significant problems in this area‚Äîit&amp;#8217;s one of the less problematic aspects of container development. Commands like &lt;code&gt;cp&lt;/code&gt; and &lt;code&gt;wget&lt;/code&gt; work as expected. BusyBox has its own ways of doing system setup tasks like adding users and groups, but they aren&amp;#8217;t conceptually different from what we&amp;#8217;re used to.&lt;/p&gt; &lt;h3&gt;Alpine dependencies&lt;/h3&gt; &lt;p&gt;Building the container almost always involves importing certain dependencies into the image. Alpine has its own repository, and its own installation command (&lt;code&gt;apk add&lt;/code&gt;).&lt;/p&gt; &lt;p&gt;A problem, however, is that some of the libraries in the Alpine repository are built against glibc, so a naive use of &lt;code&gt;apk add&lt;/code&gt; imports a sprawl of additional binaries. It&amp;#8217;s possible to fix this, but I&amp;#8217;ve found it easier to build most dependencies from source, rather than import them from repositories. I&amp;#8217;ll return to this point later.&lt;/p&gt; &lt;p&gt;The &lt;code&gt;solunar_ws&lt;/code&gt; component only has two significant dependencies: &lt;code&gt;libmicrohttpd&lt;/code&gt;, which we will build from source, and &lt;code&gt;tzdata&lt;/code&gt;‚Äîthe &lt;a href="https://developers.redhat.com/blog/2020/04/03/whats-new-with-tzdata-the-time-zone-database-for-red-hat-enterprise-linux/"&gt;global timezone database&lt;/a&gt;. This latter is not an executable and has no sub-dependencies, so we can safely install it from the Alpine repository.&lt;/p&gt; &lt;p&gt;In general, however, when aiming for a truly small container, it pays to be very careful about using repositories to build images.&lt;/p&gt; &lt;h3&gt;MUSL&lt;/h3&gt; &lt;p&gt;Alpine&amp;#8217;s core utilities are all linked against MUSL rather than glibc, and Alpine includes no other C library by default. Using MUSL is a little problematic for those of us who have grown accustomed to glibc extensions when developing for Linux. Let&amp;#8217;s take just a couple of examples. First, MUSL has no equivalent of the glibc &lt;code&gt;qsort_r()&lt;/code&gt; function, which is used for sorting arbitrary data structures. To be honest, I did not even realize that this was an extension until I started working with Alpine. Second, MUSL has some unaccountable gaps in how it implements certain functions. For example, the &lt;code&gt;strftime()&lt;/code&gt; function for formatting time data lacks specifiers that the glibc implementation has.&lt;/p&gt; &lt;p&gt;We can work around these quirks as long as we know about them. There&amp;#8217;s no substitute here for regular testing on the target platform, either in a container or in a virtual machine.&lt;/p&gt; &lt;h3&gt;TLS issues&lt;/h3&gt; &lt;p&gt;If you need to encrypt HTTP traffic to the microservice, then you&amp;#8217;ll need to decide whether it needs to be encrypted within the OpenShift cluster or just¬†&lt;em&gt;to&lt;/em&gt; the OpenShift cluster. Encrypting traffic to the cluster is simple because we can configure an OpenShift route to do edge termination. In this configuration, internal traffic between the OpenShift router and the microservice will be plain text.&lt;/p&gt; &lt;p&gt;On the other hand, if you want traffic encrypted even within the OpenShift cluster, you&amp;#8217;ll need to provide the microservice with its own Transport Layer Security (TLS) support. The libmicrohttpd library supports TLS, but to enable that support, we need to build it with development versions of a number of GNU TLS libraries. Of course, these libraries must be available to the container at runtime, as well.&lt;/p&gt; &lt;p&gt;In addition, you&amp;#8217;ll need to provide a server certificate, and a way for clients&amp;#8217; administrators to obtain that certificate. You could provide the certificates in an OpenShift secret or ConfigMap, and mount it as a file in the pod&amp;#8217;s filesystem. This technique is relatively common, and using it with C isn&amp;#8217;t any different in principle from using it with Java or any other language.&lt;/p&gt; &lt;p&gt;What &lt;em&gt;is&lt;/em&gt; different is that a Java Virtual Machine (JVM) provides TLS support implicitly, but the C developer has to install and configure the necessary dependencies at both build and runtime. For the sake of simplicity, I&amp;#8217;ve assumed that &lt;code&gt;solunar_ws&lt;/code&gt; uses edge termination, so it doesn&amp;#8217;t include or require its own TLS support.&lt;/p&gt; &lt;h2&gt;Developing for an ultra-lightweight container&lt;/h2&gt; &lt;p&gt;We can do most of the development and testing of a C-based microservice on a mainstream desktop or server Linux installation, or even on Windows 10 using the WSL Linux subsystem. However, as I&amp;#8217;ve said, it&amp;#8217;s a mistake to assume that you can change the standard C library without also changing your application code. Developing for Alpine/MUSL really does require regular testing on that platform, either in a virtual machine (VM) or in a container.&lt;/p&gt; &lt;h3&gt;Testing in a virtual machine&lt;/h3&gt; &lt;p&gt;It&amp;#8217;s trivially easy to run Alpine in a VirtualBox VM on Fedora and others, or even on Microsoft Windows. Careful use of shared folders or network storage allows for sharing source code between the different environments. This is a straightforward and intuitive way to build for a container-like environment: Do most of the development on the desktop and test incrementally in a VM with a comparable platform configuration.&lt;/p&gt; &lt;p&gt;We can do most of the development work without building a container at all because we know that the container&amp;#8217;s platform layer is mostly the same as that in the VM. Of course, you&amp;#8217;ll have to build a container at &lt;em&gt;some&lt;/em&gt; point. It&amp;#8217;s certainly not safe to assume that the application will behave the same in a container as it does in a VM, even with the same platform configuration. Still, doing development in a compatible VM can limit how often you will need to carry out the time-consuming process of building a container.&lt;/p&gt; &lt;h3&gt;Testing (and possibly developing) in a development container&lt;/h3&gt; &lt;p&gt;Provided you&amp;#8217;re happy working with console tools and scripts, it&amp;#8217;s entirely possible to do development work directly in an Alpine container by building the container with all of the development and file-sharing tools you require. You could create a Dockerfile like this:&lt;/p&gt; &lt;pre&gt;FROM alpine:3.12 RUN apk add git build-base rsync &amp;#38;&amp;#38; \ addgroup -g 1000 mygroup &amp;#38;&amp;#38; \ mkdir /myuser &amp;#38;&amp;#38; \ adduser -G mygroup -u 1000 -h /myuser -D myuser &amp;#38;&amp;#38; \ chown -R myuser:mygroup /myuser &amp;#38;&amp;#38; \ USER myuser CMD ["/bin/sh"] &lt;/pre&gt; &lt;p&gt;This code defines a container image that uses Alpine as the base. It then adds the tools needed to do development at the command line and to copy files from one place to another. It also defines a single user with a working directory. Of course, this is only one way to set up a development container‚Äîthere are many others.&lt;/p&gt; &lt;p&gt;If you run this container interactively (for instance, using &lt;code&gt;podman -it&lt;/code&gt;) then you have an interactive session in the container that you can use to edit and build your code. Of course, if you want to use sophisticated interactive development tools, you will need a much more elaborate container setup.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s vital to understand that the container&amp;#8217;s storage is ephemeral: While the user &lt;code&gt;myuser&lt;/code&gt; can read and write files in the &lt;code&gt;/myuser&lt;/code&gt; directory, these files are not retained. Even experienced developers sometimes forget this, with unhappy results.&lt;/p&gt; &lt;p&gt;I generally use a Git repository as the source of authority for code I&amp;#8217;m working on, whether it&amp;#8217;s in a container or elsewhere. Using the repository is particularly important when working in an environment with no persistent storage.&lt;/p&gt; &lt;h2&gt;Building the production container&lt;/h2&gt; &lt;p&gt;It&amp;#8217;s easy enough to build a development container for testing purposes, but in the end, we want to build the lightest possible container. We certainly don&amp;#8217;t want to include development tools or source code. There are at least two ways to build this type of production container.&lt;/p&gt; &lt;p&gt;First, we can build the binaries using a virtual machine with the appropriate operating system version (Alpine, in this case), or using a container populated with development tools. We make the binaries available in a repository, and then create a Dockerfile that retrieves the binaries.&lt;/p&gt; &lt;p&gt;Second, we can use a multi-stage build, and generate the production container from the development container. This is an entirely self-contained operation, so long as the application&amp;#8217;s source code is available. It&amp;#8217;s a much slower build operation, but it has the advantage of going &lt;em&gt;straight from a source code repository to a production container&lt;/em&gt;. This approach significantly reduces the opportunity for versioning errors.&lt;/p&gt; &lt;p&gt;Multi-stage builds are relatively new to standard container-building tools, so I&amp;#8217;ll provide an example. For more information, see &lt;a target="_blank" rel="nofollow" href="https://docs.docker.com/develop/develop-images/multistage-build/"&gt;the docker documentation&lt;/a&gt;.&lt;/p&gt; &lt;h2&gt;A multi-stage container build&lt;/h2&gt; &lt;p&gt;A multi-stage container build uses the output of one stage as the input to the next. Here is the skeleton of the Dockerfile for &lt;code&gt;solunar_ws&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;FROM alpine:3.12 RUN apk add git build-base tzdata zlib-dev &amp;#38;&amp;#38; \ get https://ftp.gnu.org/gnu/libmicrohttpd/libmicrohttpd-latest.tar.gz &amp;#38;&amp;#38; \ tar xfvz libmicrohttpd-latest.tar.gz &amp;#38;&amp;#38; \ (cd libmi*; ./configure; make install) &amp;#38;&amp;#38; \ git clone https://github.com/kevinboone/solunar_ws.git &amp;#38;&amp;#38; \ make -C solunar_ws # Binary solunar_ws ends up in / directory ... FROM alpine:3.12 RUN apk add tzdata COPY --from=0 /solunar_ws/solunar_ws / COPY --from=0 /usr/local/lib/libmicrohttpd.so.12 /usr/local/lib USER 1000 CMD ["/solunar_ws"] &lt;/pre&gt; &lt;h3&gt;The first-stage build&lt;/h3&gt; &lt;p&gt;The first-stage build populates a container image based on Alpine 3.12 with all the build tools it needs. It then downloads the source for libmicrohttpd and builds it, then does the same with &lt;code&gt;solunar_ws&lt;/code&gt;. These sources come from different places, but they&amp;#8217;re all compiled in the same way. In this example, note that we have to build libmicrohttpd before building the web service; that is because the web service depends on it.&lt;/p&gt; &lt;p&gt;This first-stage image is about 210MB in size and might take 30 seconds to a minute to construct, depending on internet bandwidth.&lt;/p&gt; &lt;h3&gt;The second-stage build&lt;/h3&gt; &lt;p&gt;The second stage starts with the same Alpine 3.12 base layer and installs only the packages that are needed at runtime‚Äî&lt;code&gt;tzdata&lt;/code&gt; in this case. It then copies from the previous build the two files that the container requires at runtime: The binary &lt;code&gt;solunar_ws&lt;/code&gt; and the library &lt;code&gt;libmicrohttpd.so.12&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;It&amp;#8217;s fair to ask why we needed to build libmicrohttpd from source when the Alpine Linux repository already has a binary package for it. The reason is to eliminate the so-called dependency sprawl. The binary package in the repository has nearly 20MB of dependencies, none of which are needed for this application. This &amp;#8220;sprawl&amp;#8221; is a relatively common side-effect of using general repositories. An alternative to building from source would be to install the binary package and just pick out the specific dependencies we require. In this case, such an approach isn&amp;#8217;t as easy as building the dependency from source, but sometimes it might be.&lt;/p&gt; &lt;p&gt;In this example, I&amp;#8217;ve used &lt;code&gt;USER 1000&lt;/code&gt; without defining any user. That&amp;#8217;s reasonable in a production container when there will never be a need for the running process to modify any files in the container.&lt;/p&gt; &lt;p&gt;The output of the second stage is an image, in this case, of about 10MB in size.&lt;/p&gt; &lt;h2&gt;Deploying on OpenShift&lt;/h2&gt; &lt;p&gt;I don&amp;#8217;t want to say too much about deployment, because it isn&amp;#8217;t substantially different for a C application than for a Java application, or anything else.&lt;/p&gt; &lt;p&gt;Once we have the production container image, there are many ways to deploy it on OpenShift. In fact, on OpenShift 4, we can build directly from a Dockerfile, provided that all the resources the Dockerfile needs are in repositories.&lt;/p&gt; &lt;p&gt;The README file in the source bundle for &lt;code&gt;solunar_ws&lt;/code&gt; explains in outline how to push the constructed production pod from the development system to the &lt;a target="_blank" rel="nofollow" href="http://www.quay.io"&gt;Red Hat Quay&lt;/a&gt; repository. Once the image is in a repository, you can create a default deployment using &lt;code&gt;oc new-app&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;$ oc new-app --docker-image=quay.io/kboone/solunar_ws:latest \ --name=solunar-ws -l app=solunar-ws&lt;/pre&gt; &lt;p&gt;For finer control, you can create a deployment configuration by running &lt;code&gt;oc create -f&lt;/code&gt;on¬†a YAML file, something like this:&lt;/p&gt; &lt;pre&gt; kind: DeploymentConfig apiVersion: apps.openshift.io/v1 metadata: name: solunar-ws spec: replicas: 1 strategy: type: Rolling selector: name: solunar-ws template: metadata: name: solunar-ws labels: name: solunar-ws spec: containers: - env: - name: SOLUNAR_WS_LOG_LEVEL value: "1" name: solunar-ws image: quay.io/kboone/solunar_ws:latest imagePullPolicy: Always ports: - containerPort: 8080 protocol: TCP livenessProbe: failureThreshold: 3 initialDelaySeconds: 30 periodSeconds: 10 successThreshold: 1 tcpSocket: port: 8080 timeoutSeconds: 1 readinessProbe: failureThreshold: 3 initialDelaySeconds: 30 periodSeconds: 10 successThreshold: 1 tcpSocket: port: 8080 timeoutSeconds: 1 resources: limits: memory: 128Mi securityContext: privileged: false --- kind: Service apiVersion: v1 metadata: name: solunar-ws spec: ports: - name: solunar-ws port: 8080 protocol: TCP targetPort: 8080 selector: name: solunar-ws &lt;/pre&gt; &lt;p&gt;I&amp;#8217;ve set a simple TCP port test for the liveness and readiness probes, given that it&amp;#8217;s likely that the application will be ready within a millisecond of this port being open.&lt;/p&gt; &lt;h2&gt;Results&lt;/h2&gt; &lt;p&gt;To test the web service using a browser, you&amp;#8217;ll need to expose the &lt;code&gt;solunar-ws&lt;/code&gt; service as a route. You can do this using the OpenShift console, the &lt;code&gt;oc create route&lt;/code&gt; command, or in a number of other ways. Figure 1 shows what the JSON output looks like in a browser.&lt;/p&gt; &lt;div id="attachment_769177" style="width: 650px" class="wp-caption aligncenter"&gt;&lt;a href="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png"&gt;&lt;img aria-describedby="caption-attachment-769177" class="wp-image-769177" src="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png" alt="The program's output as viewed in a browser." width="640" height="610" srcset="https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output.png 888w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output-300x286.png 300w, https://developers.redhat.com/blog/wp-content/uploads/2020/08/solunar-ws-output-768x733.png 768w" sizes="(max-width: 640px) 100vw, 640px" /&gt;&lt;/a&gt;&lt;p id="caption-attachment-769177" class="wp-caption-text"&gt;Figure 1. Output for the solunar-ws service.&lt;/p&gt;&lt;/div&gt; &lt;p&gt;Here are the memory usage figures from within the running pod:&lt;/p&gt; &lt;pre&gt;%top -S PID VSZ VSZRW RSS (SHR) DIRTY (SHR) STACK COMMAND 1 1384 508 860 480 92 0 132 /solunar_ws &lt;/pre&gt; &lt;p&gt;Yes, those memory figures are in &lt;em&gt;kilobytes&lt;/em&gt;. What these memory figures don&amp;#8217;t show is the sub-millisecond startup time.&lt;/p&gt; &lt;h2&gt;Closing remarks&lt;/h2&gt; &lt;p&gt;The purpose of this exercise has been to examine how small a web service can be made in a container, using C code and an ultra-lightweight base layer. However, I have to point out that, although it&amp;#8217;s &lt;em&gt;possible&lt;/em&gt; to create a tiny container, it isn&amp;#8217;t necessarily &lt;em&gt;advisable&lt;/em&gt;. In particular, this container image has no diagnostic tools of any kind. In addition, examining a core dump from a container like this will be an unhappy experience for anyone without a development environment that perfectly matches the container&amp;#8217;s base layer. As ever, there are trade-offs to be made between efficiency and serviceability.&lt;/p&gt; &lt;p&gt;Finally, I&amp;#8217;m not advocating a wholesale return to C for middleware installations‚Äîonly that it&amp;#8217;s something that&amp;#8217;s still worth considering for some parts of some applications. At the very least, examining what is involved in implementing this service in C makes us appreciate Java a whole lot more.&lt;/p&gt; &lt;h2&gt;Acknowledgments&lt;/h2&gt; &lt;p&gt;I&amp;#8217;d like to thank &lt;a href="https://developers.redhat.com/blog/author/fvaleri/"&gt;Federico Valeri&lt;/a&gt; for his helpful comments on this article, and for convincing me that it was worth writing it.&lt;/p&gt; &lt;p&gt;&lt;a class="a2a_button_facebook" href="https://www.addtoany.com/add_to/facebook?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Facebook" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_twitter" href="https://www.addtoany.com/add_to/twitter?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Twitter" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_linkedin" href="https://www.addtoany.com/add_to/linkedin?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="LinkedIn" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_email" href="https://www.addtoany.com/add_to/email?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Email" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_print" href="https://www.addtoany.com/add_to/print?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Print" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_reddit" href="https://www.addtoany.com/add_to/reddit?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Reddit" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_button_flipboard" href="https://www.addtoany.com/add_to/flipboard?linkurl=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#38;linkname=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" title="Flipboard" rel="nofollow noopener" target="_blank"&gt;&lt;/a&gt;&lt;a class="a2a_dd addtoany_share_save addtoany_share" href="https://www.addtoany.com/share#url=https%3A%2F%2Fdevelopers.redhat.com%2Fblog%2F2020%2F08%2F27%2Fdeveloping-micro-microservices-in-c-on-red-hat-openshift%2F&amp;#038;title=Developing%20micro-microservices%20in%20C%20on%20Red%20Hat%20OpenShift" data-a2a-url="https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/" data-a2a-title="Developing micro-microservices in C on Red Hat OpenShift"&gt;&lt;img src="https://static.addtoany.com/buttons/favicon.png" alt="Share"&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;The post &lt;a rel="nofollow" href="https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/"&gt;Developing micro-microservices in C on Red Hat OpenShift&lt;/a&gt; appeared first on &lt;a rel="nofollow" href="https://developers.redhat.com/blog"&gt;Red Hat Developer&lt;/a&gt;.&lt;/p&gt;&lt;img src="http://feeds.feedburner.com/~r/jbossbuzz/~4/fPAbaHp29kk" height="1" width="1" alt=""/&gt;</content><summary>Java holds its dominating position in enterprise middleware for good reasons; however, describing anything in Java as ‚Äúmicro‚Äù requires a generous interpretation. It isn‚Äôt unusual to find Java-based microservices that need half a gigabyte of RAM to provide modest functionality at a modest load. The trend toward serverless architectures, where services are started and stopped according to demand, do...</summary><dc:creator>kboone</dc:creator><dc:date>2020-08-27T07:00:16Z</dc:date><feedburner:origLink>https://developers.redhat.com/blog/2020/08/27/developing-micro-microservices-in-c-on-red-hat-openshift/</feedburner:origLink></entry></feed>
